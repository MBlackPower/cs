<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0055)http://nedbatchelder.com/text/exceptions-vs-status.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><!--<base href="http://nedbatchelder.com">--><base href="."><title>Ned Batchelder: Exceptions vs. status returns</title><link rel="stylesheet" href="./Ned Batchelder  Exceptions vs. status returns_files/style.css" type="text/css"><link rel="stylesheet" href="./Ned Batchelder  Exceptions vs. status returns_files/printstyle.css" type="text/css" media="print"><script type="text/javascript" src="./Ned Batchelder  Exceptions vs. status returns_files/nedbatchelder.js"></script><script type="text/javascript" src="chrome-extension://bfbmjmiodbnnpllbbbfblcplfjjepjdn/js/injected.js"></script></head><body><center><table id="logo_banner" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td id="logo" align="center"><a href="http://nedbatchelder.com/"><img src="./Ned Batchelder  Exceptions vs. status returns_files/dodeca3_100.gif" width="100" height="120" alt="[*]"></a></td><td id="banner"><span class="path"><a href="http://nedbatchelder.com/">Ned Batchelder</a> : <a href="http://nedbatchelder.com/blog">Blog</a> | <a href="http://nedbatchelder.com/code">Code</a> | <a href="http://nedbatchelder.com/text">Text</a> | <a href="http://nedbatchelder.com/site">Site</a></span><br><span class="headslug">Exceptions vs. status returns</span><br><span class="path">
                    Â» <a href="http://nedbatchelder.com/">Home</a> : <a href="http://nedbatchelder.com/text">Text</a></span></td></tr></tbody></table><table id="content_menu" cellpadding="0" cellspacing="0"><tbody><tr><td id="content" valign="top"><div class="body"><div id="searchwelcome"></div><p class="dateline">
                            Created 15 September 2003, last updated 14 October 2003
                        </p><p class="first">Broadly speaking, there are two ways to handle errors as they pass from
layer to layer in software: throwing exceptions and returning status
codes.  Almost everyone agrees that exceptions are the better way to do
it, but some people still prefer status returns. This article shows why
exceptions are better.
</p><p>The examples here are in C++, because that is the primary battlefield for this argument.
Older languages like C don't have exceptions as a real possibility, and newer languages like
Java, Python, Ruby, and even <a class="offsite" href="http://jimfl.tensegrity.net/eh/ExceptionHandling.html">Perl</a>
provide facilities for exceptions, without the cultural heritage that encouraged status returns
in the first place.
</p><h1 id="h_Clean_code">Clean code</h1><p>Exceptions let you leave error handling code out of much of your code.
Exceptions are transmitted automatically through layers that have no
knowledge of them, so you can write useful code that has no error handling logic at all.
This helps keep the code straightforward and usable.
</p><p>For example, compare two ways of writing the same simple procedure.
With status returns:</p><blockquote class="code"><tt><span class="n">STATUS</span>&nbsp;<span class="n">DoSomething</span><span class="p">(</span><span class="kt">int</span>&nbsp;<span class="n">a</span><span class="p">,</span>&nbsp;<span class="kt">int</span>&nbsp;<span class="n">b</span><span class="p">)</span><br><span class="p">{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">STATUS</span>&nbsp;<span class="n">st</span><span class="p">;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">st</span>&nbsp;<span class="o">=</span>&nbsp;<span class="n">DoThing1</span><span class="p">(</span><span class="n">a</span><span class="p">);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span>&nbsp;<span class="p">(</span><span class="n">st</span>&nbsp;<span class="o">!=</span>&nbsp;<span class="n">SGOOD</span><span class="p">)</span>&nbsp;<span class="k">return</span>&nbsp;<span class="n">st</span><span class="p">;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">st</span>&nbsp;<span class="o">=</span>&nbsp;<span class="n">DoThing2</span><span class="p">(</span><span class="n">b</span><span class="p">);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">if</span>&nbsp;<span class="p">(</span><span class="n">st</span>&nbsp;<span class="o">!=</span>&nbsp;<span class="n">SGOOD</span><span class="p">)</span>&nbsp;<span class="k">return</span>&nbsp;<span class="n">st</span><span class="p">;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span>&nbsp;<span class="n">SGOOD</span><span class="p">;</span><br><span class="p">}</span><br></tt></blockquote><p>And then with exceptions:</p><blockquote class="code"><tt><span class="kt">void</span>&nbsp;<span class="n">DoSomething</span><span class="p">(</span><span class="kt">int</span>&nbsp;<span class="n">a</span><span class="p">,</span>&nbsp;<span class="kt">int</span>&nbsp;<span class="n">b</span><span class="p">)</span><br><span class="p">{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">DoThing1</span><span class="p">(</span><span class="n">a</span><span class="p">);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">DoThing2</span><span class="p">(</span><span class="n">b</span><span class="p">);</span><br><span class="p">}</span><br></tt></blockquote><p>Even if the first version is rewritten with macros to hide much of the status return
scaffolding, it's uglier and more cluttered than with exceptions:</p><blockquote class="code"><tt><span class="cp">#define&nbsp;TRY(s)&nbsp;&nbsp;{&nbsp;STATUS&nbsp;st&nbsp;=&nbsp;(s);&nbsp;if&nbsp;(st&nbsp;!=&nbsp;SGOOD)&nbsp;return&nbsp;st;&nbsp;}</span><br><br><span class="n">STATUS</span>&nbsp;<span class="n">DoSomething</span><span class="p">(</span><span class="kt">int</span>&nbsp;<span class="n">a</span><span class="p">,</span>&nbsp;<span class="kt">int</span>&nbsp;<span class="n">b</span><span class="p">)</span><br><span class="p">{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">TRY</span><span class="p">(</span><span class="n">DoThing1</span><span class="p">(</span><span class="n">a</span><span class="p">));</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="n">TRY</span><span class="p">(</span><span class="n">DoThing2</span><span class="p">(</span><span class="n">b</span><span class="p">));</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="k">return</span>&nbsp;<span class="n">SGOOD</span><span class="p">;</span><br><span class="p">}</span><br></tt></blockquote><p>If the code were more complex than this, the extra noise from the error handling
would be much worse.  Exceptions keep the code clean.</p><h1 id="h_Valuable_channels">Valuable channels</h1><p>With status returns, a valuable channel of communication (the return value of the
function) has been taken over for error handling.  Some methods are so simple, and
conceptually return a value, so human temptation takes over, and the method is written
to return the value rather than a status code.  "It's a simple function, it can't fail,
this will be more convenient".  Over time, the code grows, and the method gets larger,
calling more helper functions, and pretty soon it can fail, but it has no way to express it.
</p><p>So the return value is overloaded: "If it fails, it returns NULL".  Now we have more than
one convention in the code (probably more, because your numeric getters will return -1 if they
fail), and everything still has to be checked.  Your previously failsafe function now has
to have all of its call sites updated to check for the new error value.
</p><p>Why use a technique that begs to be subverted in the first place?  Exceptions stay
in the background, leaving the most useful tools for the successful cases.  Functions
can return values, and still have a useful way to fail.
</p><h1 id="h_Richer_error_information">Richer error information</h1><p>Status returns are typically an integer.  A few bits are reserved for flags (for example,
a severity indication), and the rest are a large set of enumerated failures.
This is a fairly impoverished error value.  For example, suppose the failure is that a file
could not be found.  Which file?  A status return can't convey that much information.</p><p>Other channels can be developed to carry supplemental information, but typically they
are not.  In a status return world, the best you can hope for is for the failure site
to log a message, and then to return the status.  This is simplistic: perhaps the caller
knows that it is OK for a file to be missing.  If the file opener logs a message, the log
will be incorrect (an error will be printed when nothing is wrong).  If the file opener
doesn't log a message, the caller (or his caller) may have no way of getting the detail
on the error needed to print a useful message.</p><p>Exceptions are instances of classes, and as such can carry as much information
as they need to accomplish their task.  Because they can be subclassed, different exceptions
can carry different data, allowing for a very rich zoology of error messages.</p><p>As an example of the richness exceptions can express, Java defines exceptions
as containing a reference to another exception, so that chains of effect can
be constructed and retained as the exception moves up through layers of handling.
This allows for rich diagnostic information: exception B occurred here, and was
caused by exception A occurring there.</p><h1 id="h_Implicit_code">Implicit code</h1><p>Status returns can't even be used with some functions.  For example, constructors
don't have an explicit return type, and so cannot return a status code.
Destructors may not even be explicitly called, never mind that they don't have a
return value.
In C++, operator overloading and implicit casting (controversial though they are) are
other forms of implicit function calls that cannot be checked for return values.
</p><p>None of these functions can be given status returns.  If you don't use exception handling,
you have to either come up with some other way of marking errors within them, or pretend
that they cannot fail.  Simple code may be fail-safe, but code always grows, adding
opportunities for failure.  Without a way to express the failure, your system will
only grow more error-prone and mysterious.
</p><h1 id="h_Sins_of_omission">Sins of omission</h1><p>Consider what happens in each technique when a coder slips up.</p><p>When a status return goes unchecked, a failure in the called routine will be undetected.
The code will continue executing as if that operation had succeeded.  There's no way
to characterize what might happen at that point, but it is clear that no one will know
that an error had occurred.  Perhaps the code will visibly fail later on, but that
could be many operations later.  How will you trace the problem back to the original
failure?
</p><p>If an exception goes uncaught, the exception will travel upward in the call stack
either to a higher catch block, or to the uppermost frame where the operating system
will do something with it, usually present it to the user.  This is not good behavior
for the system, but it is visible.  You will see an exception, you will be able to
diagnose where it was thrown, and where it should have been caught, and you will be
able to fix the code.
</p><p>I'm not covering here the problem of failing to announce a problem (either by returning
a failure code or throwing an exception), because that case is a wash for the two
techniques.  Both are prone to it, and both will fail in similar ways.
</p><p>So for human error, it comes down to this: human error with status returns results
in invisible problems, human error with exceptions results in visible problems.
Which would you rather have?
</p><h1 id="h_Counter-arguments">Counter-arguments</h1><p>Joel Spolsky has argued that
<a class="offsite" href="http://www.joelonsoftware.com/items/2003/10/13.html">status returns are better</a>.
His main argument is that exceptions "are significantly worse than gotos":
</p><blockquote><div><ol><li><em>They are invisible in the source code.</em>
Looking at a block of code, including functions which may or may not throw exceptions,
there is no way to see which exceptions might be thrown and from where.
This means that even careful code inspection doesn't reveal potential bugs.</li><li><em>They create too many possible exit points for a function.</em>
To write correct code, you really have to think about every possible code path
through your function.
Every time you call a function that can raise an exception and don't catch it on the spot,
you create opportunities for surprise bugs caused by functions that terminated abruptly,
leaving data in an inconsistent state, or other code paths that you didn't think about.</li></ol></div></blockquote><p>This seems like a reasonable argument until you work out what the code would look like
with status returns.  We aren't arguing here whether functions should be able to fail
or not, just what should happen when they do.  So all of those possible exit points
for a function are still possible exit points, but you have to check the status returns
explicitly, and return from the function.  So you've traded implicit complexity for
explicit complexity, which may not be a good trade.  With explicit complexity, you can't
see the forest for the trees.  Your code is cluttered with the explicit handling of error
statuses.</p><p>When presented with this explicit complexity, programmers will strive to reduce it.
They have two primary ways to do it: hide the error handling, or omit the error handling.</p><p>Hiding the error handling is what we did above with the TRY macro.
This simply turns your explicit code paths back into implicit code paths,
but with the annoying noise of TRY littered all over the place.
This is certainly no victory for the "explicit code paths are better"
argument for status returns.
If you're going to use implicit code paths, at least use exceptions to create them
so you have some modern tools at your disposal.</p><p>The other solution to the overwhelming explicit complexity in code paths is to simply
avoid checking the error returns.  Developers will convince themselves (through code inspection
or system-level understanding or just plain bad logic) that a certain function
always succeeds.  This leads to errors going unchecked, which leads to invisible problems.</p><h1 id="h_In_a_nutshell">In a nutshell</h1><p>Status returns are difficult to use.  There are places where they are impossible to
use.  They hijack a useful channel of communication.  For all of these reasons,
it is easy and tempting to not use them.  When not used, they produce silent failures
in your system.
</p><p>Status returns are inferior to exceptions.  All modern programming systems provide
tools for exception handling.  Use them.
</p><h1 id="h_See_also">See also</h1><ul><li><a href="http://nedbatchelder.com/text/exceptions-in-the-rainforest.html">Exceptions in the rainforest</a>,
about the layers of real code, and how exception handling plays out in them.</li><li><a href="http://nedbatchelder.com/text/assert.html">Asserts</a>,
about making assertions about the correctness of your code.</li><li><a href="http://nedbatchelder.com/text/fix-err-hand.html">Fix error handling first</a>,
about ensuring your error handling code is running its best.</li><li><a href="http://nedbatchelder.com/text/log-style-guide.html">Log message style guide</a>,
about writing good log messages.</li><li><a href="http://nedbatchelder.com/blog">My blog</a>,
where other similar topics are discussed.</li></ul><div class="googleads"></div><div class="comments" id="comments">
<h1>Comments</h1>

	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/299cd31827971004c475db54afd5dfc6.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://www.rit.edu/~sgd9494" rel="nofollow" target="_blank">Santosh Dawara</a></b></span>
			<span class="when"><span class="adminlink"></span> 11:27 AM on 15 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Coincidence? Yesterday I had to fix a method that trapped an exception and returned a status instead. Nasty bit of of work would'nt allow the application that was using the library to handle the exceptions on an individual merit.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/a2a039a5c52565449cd2584db8471ed0.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Mike</b></span>
			<span class="when"><span class="adminlink"></span> 1:04 PM on 15 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Joel has great software-business/project-manager intuition and smarts, but I fear he may be lacking in the pure-technical department. He argues that this argument devolves into  a religious debate, like so many other debates in our industry. In fact, he's wrong, based on your arguments, and on the fact that declared exceptions reduce the cognitive load on the programmer by eliminating the need to memorize all the return values of a given function. Not to mention, return codes never get checked anyway, so having the thread/process halt (and/or passing the offense up the call stack so a higher level error loop can handle it!) on an unchecked error is clearly the correct thing to do.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/d41d8cd98f00b204e9800998ecf8427e.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://www.genezys.net/" rel="nofollow" target="_blank">Anubis</a></b></span>
			<span class="when"><span class="adminlink"></span> 2:14 PM on 15 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Actually, you should have written :
<br>
<br>    STATUS DoSomething(int a, int b)
<br>    {
<br>        STATUS st;
<br>        st = DoThing1(a);
<br>        if (st != SGOOD) return st;
<br>        st = DoThing2(b);
<br>        if (st != SGOOD) return st;
<br>        return SGOOD;
<br>    }
<br>
<br>    ...
<br>    STATUS st;
<br>    st = DoThing1(a);
<br>    if (st != SGOOD) cout
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/d41d8cd98f00b204e9800998ecf8427e.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://www.genezys.net/" rel="nofollow" target="_blank">Anubis</a></b></span>
			<span class="when"><span class="adminlink"></span> 2:17 PM on 15 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Ouch... My comment was cut off :-(.
<br>
<br>Actually, I wanted to point that you forgot the whole try/catch mess in your exception example...
<br>
<br>Exceptions does not keep code as clean as you try to show.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/d41d8cd98f00b204e9800998ecf8427e(1).jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://nedbatchelder.com/www.waspgames.com" rel="nofollow" target="_blank">Osmo Suvisaari</a></b></span>
			<span class="when"><span class="adminlink"></span> 5:27 PM on 15 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Which would I rather have: Invisible or visible problems?
<br>
<br>The answer clearly depends on circumstances. Errors should be as visible as possible during debugging and testing - and invisible (if possible - and logged) when used by an end-user.
<br>
<br>I think the general idea of exceptions is good but... To crash by default: Who did come up with such a bad idea?
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/c9e4d137986eb5e19068aa5ebb9de457.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Andrew Eidsness</b></span>
			<span class="when"><span class="adminlink"></span> 6:56 PM on 15 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			I think that the point that's getting glossed over in this debate is the work required to undo side-effects.  To take joel's suggestion (http://www.joelonsoftware.com/items/2003/10/15.html) and replace DoThing1 with CopyFiles, it becomes apparent that we can't just transitively throw an exception out of DoThing2; we also need to undo the work of DoThing1 e.g., un-copy the files.  Otherwise our system will get into an unknown and therefore unrecoverable state (this would be even clearer if "CopyFiles" was "DeleteFiles").
<br>
<br>In my opinion, the best discussion on exceptions starts with Tom Cargill's "Exception Handling: A False Sense of Security".  When this article was first published (in '94) it was apparent to the C++ community that exceptions and their implications were not well understood.
<br>
<br>The challenges he posed were eventually addressed on comp.lang.c++.moderated in the "Guru of the Week #8" thread (http://pierre.aubert.free.fr/divers/gotw/gotw008.htm).  And I find Herb Sutter's _Exceptional_C++_ to be the best summary of the entire discussion.
<br>
<br>My personal conclusion (I'm a fan of exceptions when they are properly used) is just a reinforcment of what should be standard programming technique; "functions should only do one thing".
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/d41d8cd98f00b204e9800998ecf8427e(2).jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://nedbatchelder.com/www.artlum.com" rel="nofollow" target="_blank">fungus</a></b></span>
			<span class="when"><span class="adminlink"></span> 7:50 PM on 15 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Here's Joel's "tricky" example done with exceptions:
<br>
<br>void InstallSoftware(int a, int b)
<br>{
<br>    FileCopier a;
<br>    RegistrySetup b;
<br>
<br>    // If we got this far without an exception
<br>    // then everything is ok
<br>    a.success();
<br>    b.success();
<br>}
<br>
<br>The idea is that a can undo anything it did, and will do so if you don't call a.success();
<br>
<br>If any exceptions are thrown while the registry is being set up then a.success() isn't called and its destructor will remove all the files it installed.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/d41d8cd98f00b204e9800998ecf8427e(2).jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://nedbatchelder.com/www.artlum.com" rel="nofollow" target="_blank">fungus</a></b></span>
			<span class="when"><span class="adminlink"></span> 7:53 PM on 15 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Ooops, I messed up the code, I didn't spot the input parameters:
<br>
<br>void InstallSoftware(int a, int b)
<br>{
<br>  FileCopier f(a);
<br>  RegistrySetup r(b);
<br>
<br>  // If we got this far without an exception
<br>  // then everything is ok
<br>  f.success();
<br>  r.success();
<br>}
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/c35afea1e92b77edc17f9b3b28fd0cea.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Grant</b></span>
			<span class="when"><span class="adminlink"></span> 9:31 PM on 15 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			First I find it ironic that Joel mentions goto in his comments against exceptions. I have run across examples of return value error handling code that use gotos to jump to a common segement of cleanup code at the end of a function to avoid redundancy.
<br>
<br>Second, what bugs me is that there is little consistency in error reporting methods. Does it throw an exception?  Does it return zero on error? Does it return non-zero on error? Does it return negative on error? Do I need to check a global runtime variable for the error code? Do I need to call another function to get the error code? Which function should I call? Does it use setjmp/longjmp? Does it throw a structured exception?
<br>
<br>Third, exceptions have their own traps. Don't go letting your destructors propagate exceptions. You'll probably be surprised what throws clauses do in C++. Should you catch(E e), catch(E *e) or catch(E &amp;e)? Are you checking new's for null? Time to break out the Meyers and Sutter books...
<br>
<br>Of course, you could also talk about checked exceptions, another hotly debated topic...
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/046b8b98658e00a3e5d0b84279bf6bca.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Dave</b></span>
			<span class="when"><span class="adminlink"></span> 4:41 AM on 16 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Some of the same points against status returns also apply to exceptions.
<br>
<br>Both methods suck, frankly.  At least Java makes an attempt to make exceptions better/safer.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/aa096111e25fdfe780ed772b46a7694c.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Ben</b></span>
			<span class="when"><span class="adminlink"></span> 8:20 AM on 16 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			What a glaring omission in your original comparison (under "Clean Code") -- you do not show your exception handling! This tells me everything I need to know about the depth of your argument. I completely side with Joel on this one, exceptions are like gotos, for programmers who think they can avoid the issue of errors and send them all off in one corner.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/0cd507285a879807221e338354a36b17.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://www.looseleaf.net/" rel="nofollow" target="_blank">Bob Balaban</a></b></span>
			<span class="when"><span class="adminlink"></span> 9:35 AM on 16 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Don't forget about the performance implications, too. With status returns, you have code executing on every call (regardless of success or failure) to check the status code. With exceptions, the success case (which we hope is most of the cases) does not have that extra code.
<br>
<br>Years ago at Lotus one of the architects did an actual benchmark of some code in 123 written first with the status technique and then with the exception technique, and claimed that the exception technique was 15% less code (he was comparing compiled code size) and maybe 5% faster.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/172d2477e022c0cf9a15eeaedaae24d6.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Kyle Jedrusiak</b></span>
			<span class="when"><span class="adminlink"></span> 12:07 PM on 16 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			I happen to use c# and the .NET Framework.
<br>
<br>I can predefine my own exception objects, store any pertinent information in the object that may help me debug the code, or find a way to handle the exception gracefull.
<br>
<br>So I really have both...I can use exceptions and return usefull info on the exception.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/fa4b4d861db65832bbe2288f57207ace.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Walker</b></span>
			<span class="when"><span class="adminlink"></span> 12:18 PM on 16 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			To Mr. 'Glaring omission':
<br>
<br>Uh--I think you missed the point. The point is that the code with exceptions will do something on an error whether you catch the exception explicitly or not. (In this example, he doesn't, meaning it would probably be caught by the OS and the program would be shut down.) In the example with status codes, if you didn't check the return code, it will trundle merrily on its way, even if something went horribly wrong.
<br>
<br>As to which approach is better, I'm not sure--both sides have valid points. I just wanted to point out that your comment ('This tells me everything I need to know about the depth of your argument') is by no means a deep argument in itself. All it demonstrates is that you either didn't understand or just didn't bother to really read the article.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/d41d8cd98f00b204e9800998ecf8427e(3).jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://livejournal.com/~109" rel="nofollow" target="_blank">109</a></b></span>
			<span class="when"><span class="adminlink"></span> 4:12 PM on 16 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Bravo! Brilliant article. I've just spent a couple of hours exchanging blog comments with my friend who got too excited by Joel's article on exceptions, using most of the arguments you use. If I read this article before, I would just give him a link.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/6813520aa985fb8f1297a6bad7472378.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Ray Trent</b></span>
			<span class="when"><span class="adminlink"></span> 6:58 PM on 16 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			I think this reason this gets cast as a religious argument is that fundamentally the 2 mechanisms do the same thing. Both require careful use, and both can be abused easily. 
<br>
<br>There typically are 10 kinds of people, those who think in binary and those who don't... oops, throw XInappropriateMetaphor.
<br>
<br>Anyway, I think the religious disagreement is between people that prefer explicit handling of errors vs. those that prefer implicit handling. The reason I say this is that if you're in the explicit camp, exceptions are even more bloated than status returns (both in clutter and execution overhead), which removes a significant fraction of their advantages. 
<br>
<br>I tend to live in the explicit camp, personally. But that said, it's perfectly clear to me what problem exceptions are intended to solve. 
<br>
<br>But consider this: either a piece of code knows what should be done if a function it calls fails, or it doesn't. If it does, it can, and probably should, handle the error, to avoid too much "action at a distance". If it doesn't know what should be done, there's not much point in it checking for or handling the error. Passing the buck just introduces unnecessary implementation coupling.
<br>
<br>Of course, that just recasts the debate into terms of whether it's better to crash or fail softly when an error occurs.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/c533ed2620a06cbb95d17b66c778ace6.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Mathieu Routhier</b></span>
			<span class="when"><span class="adminlink"></span> 9:35 AM on 22 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Here's just another suggestion about returning statuses, which I think is cleaner.
<br>
<br>STATUS DoSomething(int a, int b)
<br>{
<br>    STATUS st=SGOOD;
<br>
<br>    if (st == SGOOD)
<br>        st = DoThing1(a);
<br>
<br>    if (st == SGOOD)
<br>        st = DoThing2(b);
<br>
<br>    return st;
<br>}
<br>
<br>Obviously, you could omit the first check for status.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/cd1587aa3d37aecc13b107e32ff7c170.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Kannan Goundan</b></span>
			<span class="when"><span class="adminlink"></span> 4:39 PM on 22 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Kyle Jedrusiak:
<br>
<br>What two things do you mean when you say "I really have both"?  Exceptions already come with richer information (there's a section in the article about this).
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/5234083779d25e72763a00130dff7cd0.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>ogd (somewhere between dog and god)</b></span>
			<span class="when"><span class="adminlink"></span> 5:16 PM on 23 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			I'd have to say hmmm... and yes.  I'd have to say that Andrew @ the top of this discussion really nailed it.
<br> Functions should only do one thing.  If they don't then proceed at your own risk.
<br>I don't know how much code I have reviewed (and developed in the past) that has not met this criteria to the detriment of readability and maintability; and of course reusability.
<br>Even in Joel's modified trival example, it's copyfiles() that should be rolling back what it called... hopefully copyFile()
<br>I use both statuses and throw exceptions depending on the situation.  Especially on private functions I tend catch exceptions and return statuses, and then  on public functions handle statuses and throw exceptions.  The assumption is that I know how my privates are used, but obviously not the publics.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/357a20e8c56e69d6f9734d23ef9517e8.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Brit</b></span>
			<span class="when"><span class="adminlink"></span> 7:43 PM on 24 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			First of all, exceptions and status do not solve the same problem.  Under "Richer Error Information", Ned writes "perhaps the caller knows that it is OK for a file to be missing".  So, you're going to throw an exception, huh?  Any idea what the performance hit is for an exception?  Here's a bit of code:
<br>
<br>void ThrowExceptionFunc()
<br>{
<br>	static int ex;
<br>	int i=0;
<br>	throw ex;
<br>}
<br>
<br>( loop 1 million times )
<br>{
<br>	try
<br>	{
<br>		ThrowExceptionFunc();
<br>	}
<br>	catch( int ex )
<br>	{
<br>	}
<br>}
<br>
<br>Compiled with VS.NET, Release build, if you comment out "throw 1", this executes in 0.002 seconds.  If, on the other hand, you throw an exception, this code takes over 4 seconds.  Throwing exceptions is a performance hit.
<br>
<br>In "More Effective C++", Scott Meyers writes "Compared to a normal function return, returning from a function by throwing an exception may be as much as three orders of magnitude slower.  That's quite a hit... If, however, you've been thinking of using exceptions to indicate relatively common conditions... now would be an excellent time to think again."
<br>
<br>So, exceptions should ONLY be thrown under exceptional conditions - not for "just thought you should know" messages.
<br>
<br>I don't like status values either.  I prefer the method of writing a small class which holds error information.  You have to know something about performance to make it work efficiently, but you can impliment all kinds of great warning, error, and success messages which don't require the performance overhead of exceptions and are more useful than a status number.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/b85dbfdcd011aa7cab85875264733e33.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Macneil Shonle</b></span>
			<span class="when"><span class="adminlink"></span> 11:34 AM on 25 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			OK, one major point is being missed here: Exceptions help the problem of separation of concerns in a way that result codes can't. This is important in layered software: suppose at the bottom we have layer A; on top of it is layer B, and on top of that is layer C.
<br>
<br>When an exception occurs in layer A it may only be of concern to layer C. For example, C may know how to handle it, while B can't. A solution without exceptions would mean the error condition will crosscut B's implementation. This is also a reason why RuntimeExceptions in Java are better, because you aren't forced to check the exception or declare it in the throws clause.
<br>
<br>(The language extension AspectJ provides better support for exceptions and allows the "softening" of need-to-handle exceptions.)
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/ec165853529cb49732969bb11d1e0e80.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Ray Hsieh</b></span>
			<span class="when"><span class="adminlink"></span> 7:03 AM on 27 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Grant: you should catch(E&amp; e). Funny how some of Scott Meyer's items are still sticking to me after all these years of Java programming...
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/26625d8de016970e70392e6cde771ff8.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>scott</b></span>
			<span class="when"><span class="adminlink"></span> 9:28 PM on 27 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Hmmm..  I don't think Joel's second argument is even valid.  Returning on error from a function requires me to first identify that the error occured, and then do 'something' to return -  
<br>
<br>SetLastError();
<br>return;
<br>
<br>or 
<br>
<br>return x;
<br>
<br>or 
<br>
<br>throw "Exception";
<br>
<br>or some other mechanism of notifying the caller.
<br>
<br>I still have an exit point wherever I would discontinue current function execution.  Multiple exit points are just a prevalent in non-exceptional :) code as it is with exceptional code.  Even with exceptions its possible to minimize exit points from any function with good design.
<br>
<br>As to his first argument, I agree with Ned and one of the previous posters.  If exceptions are clearly declared, meaning you are using a compiler that understands declaration of exceptions that can be thrown from any function, nothing is hidden from the programmer.  I would say it is just the opposite.  With clearly declared exceptions the programmer can easily see the complete list of all possible error conditions from a given function.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/fa1597d3188391be784a968220c7c457.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Mike Mangino</b></span>
			<span class="when"><span class="adminlink"></span> 2:37 PM on 30 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Why is everybody bashing goto? Goto is almost required for error handling with status codes. For instance, if we do three things, createDirectories, installFiles, updateRegistry, we have multiple things to undo on failure:
<br>
<br>int doStuff() {
<br> if (!createDirectories)
<br>   goto err_create_directories;
<br> if (!installFiles())
<br>   goto err_install_files;
<br> if (!updateRegistry)
<br>   goto err_update_registry;
<br> return SUCCESS;
<br>
<br>err_update_registry:
<br>  undoUpdateRegistry();
<br>err_install_files:
<br>  undoInstallFiles();
<br>err_create_directories:
<br>  undoCreateDirectories();
<br>return ERROR;
<br>}
<br>
<br>Otherwise, how do you undo all of those things?
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/9130cabad3c69d17a0e9d89f3f98ce02.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Warren Spencer</b></span>
			<span class="when"><span class="adminlink"></span> 3:25 PM on 30 Oct 2003</span>
		</div>
		
		<p class="commenttext">
			Exceptions are nice, but you lose "context" information.  When the same method is called repeatedly from within one routine, how does the "catch" block in that routine determine which call caused the exception to be thrown?
<br>
<br>With return status checking, you know where you are.  The exception example should add the appropriate code to determine this - thereby making it as messy as the return-status-checking theory.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/55a78f28073fc6c4fff0d16f7b4f4b2a.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Matt Morris</b></span>
			<span class="when"><span class="adminlink"></span> 10:06 AM on 6 Nov 2003</span>
		</div>
		
		<p class="commenttext">
			This problem was solved a while ago in C++. See appendix e of the 3rd edition of Bjarne's book. All I can say is that I have seen the techniques work and that I personally do not find them at all onerous. 
<br>
<br>As for context, you can always do catch-add_context-rethrow. Works for me.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/995bf8ff77760d7c8472a4679b84d278.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Mikael Brockman</b></span>
			<span class="when"><span class="adminlink"></span> 1:32 PM on 10 Nov 2003</span>
		</div>
		
		<p class="commenttext">
			It should be specified that this article deals with the merits of C++, not of return values and exceptions. Return values are great to work with in Haskell, when you understand and use monads. Of course, monads can be implemented in many other languages, but using them in C++ would be very tedious.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/d41d8cd98f00b204e9800998ecf8427e(4).jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://nedbatchelder.com/www.point6.net" rel="nofollow" target="_blank">Jason Kozak</a></b></span>
			<span class="when"><span class="adminlink"></span> 2:37 PM on 15 Nov 2003</span>
		</div>
		
		<p class="commenttext">
			I'm not sure why people keep bringing up performance hits with regards to exceptions.
<br>
<br>Yes, exceptions have a performance hit, and that's not necessarily a bad thing. If you have a function that will fail regularly enough to cause a performance hit with exceptions, then it's likely what's causing it to fail isn't very "exceptional", and status codes should be used.
<br>
<br>Joel's points against exceptions sound rather well reasoned at first, but they aren't. 
<br>
<br>Invisible exceptions are no more problematic than invisible status codes. Just as you may not know the exceptions a function may use, you just as well may not know the convention for returning error codes, especially when the function is returning a useable value as well. It doesn't matter whether you use status codes or exceptions, neither avoids the necessity of proper documentation.
<br>
<br>Joel's second point is almost moot in itself. As Ned explained, an exception that isn't immediately caught will propagate until it is, even if that happens to be at the OS level. If a function leaves data in an inconsistant state, then your destructors need work. In addition, the ability of exceptions to propagate between layers without introducing dependancies, mentioned by Macneil, is half the benefit of their use.
<br>
<br>
<br>In response to Warren, yes, handling exceptions from reoccuring calls will introduce more code in situations where context is important. Even ignoring the probably necessary refactoring of said function, the additional code is no more than what you'd have with status checks, and retains the benefits of exceptions.
<br>
<br>
<br>This isn't a religious issue, it's a technical one. One solution behaves one way, the other in a different manner. Research and evaluate the behaviour of each, and decide for yourself.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/1a47056804de0629d12f2dba363d5bd3.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Csaba Csoma</b></span>
			<span class="when"><span class="adminlink"></span> 5:16 PM on 24 Nov 2003</span>
		</div>
		
		<p class="commenttext">
			First: I'm pro exception.
<br>But it has it's own catch.
<br>
<br>Try to create an exception object when the exception was "out of memory".
<br>
<br>And try to solve Mike Mangino's goto/status example with exceptions.
<br>
<br>Is there "one thing fits all"?
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/48bc893fcbc0a33ed3ad2cf2d5d57cfe.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Jon</b></span>
			<span class="when"><span class="adminlink"></span> 3:35 PM on 7 Dec 2003</span>
		</div>
		
		<p class="commenttext">
			&gt; Try to create an exception object when the exception was "out of memory". 
<br>
<br>Pre-create the exception at the beginning of the program and throw it only if the event arises.
<br>
<br>&gt; And try to solve Mike Mangino's goto/status example with exceptions.
<br>
<br>Something like this would work:
<br>
<br>void doStuff() {
<br>  try {  
<br>    createDirectories;
<br>    try {
<br>      installFiles;
<br>      try {
<br>        updateRegistry;
<br>      } catch (Exception e) {
<br>        undoUpdateRegistry;
<br>        throw e;
<br>      }
<br>    } catch (Exception e) {
<br>      undoInstallFiles;
<br>      throw e;
<br>    }
<br>  } catch (Exception e) {
<br>    undoCreateDirectories;
<br>    throw e;
<br>  }
<br>}
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/1a47056804de0629d12f2dba363d5bd3.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Csaba Csoma</b></span>
			<span class="when"><span class="adminlink"></span> 2:39 PM on 11 Dec 2003</span>
		</div>
		
		<p class="commenttext">
			&gt; Something like this would work: [...]
<br>
<br>Nested try/catch? Is that better, than nesting "if"?
<br>And when you have 5-6? Can you read/debug properly?
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/48bc893fcbc0a33ed3ad2cf2d5d57cfe.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Jon</b></span>
			<span class="when"><span class="adminlink"></span> 12:29 PM on 14 Dec 2003</span>
		</div>
		
		<p class="commenttext">
			&gt; Nested try/catch? Is that better, than nesting "if"? 
<br>
<br>Is there anything wrong with nesting "if" statements and what has this got to do with exceptions?
<br>
<br>&gt; And when you have 5-6? Can you read/debug properly? 
<br>
<br>When the code is properly laid out (unlike in this web forum) you can easily see the paths of execution that might transpire.
<br>
<br>But I think you're missing the point: yes, if you want to have several operations, each of which might fail and each of which requires clean-up if they do, you'll need a relatively complex construct. Ultimately, you should have coded the operations themselves to catch their errors and clean up so that they could be used elegantly. So you'd then have:
<br>
<br>void InstallFiles() {
<br>  try {
<br>    // Whatever
<br>  } catch (Exception E) {
<br>    // Cleanup
<br>  }
<br>} ... and so on, for each function, then you can just go:
<br>
<br>InstallFiles;
<br>UpdateRegistry;
<br>CreateDirectories;
<br>
<br>The benefits that exceptions provide even in this case remain numerous:
<br>
<br>- Errors can be easily propagated to the level at which they are best dealt with
<br>
<br>- Obscure status code values do not have to be memorised yet errors cannot be accidentally ignored
<br>
<br>- You can write the code to deal only with specific exceptions that you might expect to happen (eg, FileNotFoundException) and yet it will still operate in the case of less-common exceptions such as MemoryFullException by passing the error on automatically
<br>
<br>- Additional information can be tied to the Exception (eg, a FileNotFound exception can store a filename where a status code of E_FILE_NOT_FOUND cannot)
<br>
<br>The transparency of exceptions is a benefit, not a problem. A great percentage of the lines of code in a program can fail and dealing with every single circumstance individually complicates the program significantly, making it harder to understand. It also has the effect of complicating testing to the point where it might become almost impossible.
<br>
<br>For instance, imagine code which creates two new objects:
<br>
<br>Object o = new Object;
<br>Object p = new Object;
<br>
<br>Both of these calls could fail: there might not be enough memory, the object's constructor might throw an exception, etc. If these objects are particularly liable to fail, armed with exceptions, a programmer can choose to catch the exceptions and deal with them specifically - but if the chance of the functions failing is extremely remote or there is little they can realistically do if they _do_ fail, they can ignore them at this level and allow them to be dealt with by a higher level handler.
<br>
<br>Without exceptions, checking return values becomes complusory if reliability is to be maintained. The two simple lines above become:
<br>
<br>Object o = malloc(sizeof(o));
<br>if (!o)
<br>  ; // Do what? Quit? That's useful..
<br>Object p = malloc(sizeof(p));
<br>If (!p)
<br>  ; // Do something imaginative
<br>
<br>Now imagine having to write a test module that arranges things such that the creation of Object o succeeds and Object p fails and you begin to see how explicitly dealing with all possible errors might actually decrease reliability of programs.
<br>
<br>The argument that functions have multiple possible exit points with exceptions does not hold because in the majority of cases, functions which check return values will bail out in the case of errors anyway. Exceptions consolidate the error-handling code for all cases into "catch" handlers and in fact probably serve to decrease the number of code paths that could be taken.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/78c13601ffd6f8129fe0ffc70512bada.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://clockwise.shorturl.com/solo" rel="nofollow" target="_blank">Lachlan B</a></b></span>
			<span class="when"><span class="adminlink"></span> 4:02 AM on 20 Feb 2004</span>
		</div>
		
		<p class="commenttext">
			Just thought you might be interested in reading my latest post <a rel="nofollow" href="http://clockwise.shorturl.com/solo"> here</a>. Mentioned your article.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/c520945b602b5ae9dff17482c8281639.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Frank</b></span>
			<span class="when"><span class="adminlink"></span> 11:45 AM on 14 Sep 2006</span>
		</div>
		
		<p class="commenttext">
			I arrived at your page by Googling: "C++" exceptions return status method comparison
<br>
<br>Unfortunately, your site picked up that fact and highlighted in different colored backgrounds the seached for words -- making your page irritating to read at best.  DON'T DO THAT!
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/d41d8cd98f00b204e9800998ecf8427e(5).jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://home.comcast.net/" rel="nofollow" target="_blank">Michael C.</a></b></span>
			<span class="when"><span class="adminlink"></span> 3:52 AM on 16 Nov 2006</span>
		</div>
		
		<p class="commenttext">
			I think there are other ways of checking for errors besides using exceptions or error codes.
<br>For example, some programmers prefer to use global state variables or functions.  
<br>( For an example, see OpenGL )
<br>
<br>Moreover,  some ( professional ) programmers don't even bother checking for errors.
<br>( Hey it either works or it doesn't work. )
<br>For an example of this type of coding,
<br>see the quake 3 source code.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/d41d8cd98f00b204e9800998ecf8427e(6).jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://gpwiki.org/index.php/C_plus_plus:Modern_C_plus_plus" rel="nofollow" target="_blank">me22</a></b></span>
			<span class="when"><span class="adminlink"></span> 6:46 PM on 28 Jan 2007</span>
		</div>
		
		<p class="commenttext">
			This is really not that complex.
<br>
<br>You use exceptions for exceptional situations.  For example, out of memory rarely happens and the function allocating memory can rarely do something intelligent with it anyways, so exceptions are a win.  On the other hand, lookup in a hash table can and will fail often.  Much better to return a Maybe (Haskell), option (SML), past-the-end iterator (C++), null (Java), or similar instead.
<br>
<br>Just like everything else that's a (holy) war, neither is always better.  Use the one that fits better and you'll be better off than anyone that thinks one is always better.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/b40f632d0f521ac8df2098f3143bdc77.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>AN</b></span>
			<span class="when"><span class="adminlink"></span> 2:06 PM on 2 Mar 2007</span>
		</div>
		
		<p class="commenttext">
			Count me as heretical -- I'm with Joel in hating exceptions.
<br>
<br>Status codes are always going to clutter up your code with explicit error handling in a way that exceptions don't, but explicitly declaring the exit points in your code is much better than only knowing them implicitly.
<br>
<br>As far as hijacking the return value, I don't. In C#, I return a struct: Result. You wrap the result object around your return value (if any), and it returns back all nice and strongly typed.
<br>
<br>Result ri = obj.DoStuff();
<br>if (ri.Error) { // propagate error }
<br>int myValue = ri.ReturnValue;
<br>
<br>Yes, int myValue = obj.DoStuff(); is certainly cleaner. But it's easy to miss pieces of state that need to be cleaned up if you don't handle error cases explicitly. Exceptions leave subtle time bombs that go off in your code and break the application state. Error handling gives you an explicit place where you need to clean up anything interesting that happened in your method before exiting.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/b40f632d0f521ac8df2098f3143bdc77.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>AN</b></span>
			<span class="when"><span class="adminlink"></span> 2:07 PM on 2 Mar 2007</span>
		</div>
		
		<p class="commenttext">
			Update: your site doesn't like angle brackets.
<br>
<br>That should be Result&lt;T&gt; and then 
<br>
<br>Result&lt;ri&gt; = obj.DoStuff();
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/b40f632d0f521ac8df2098f3143bdc77.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>AN</b></span>
			<span class="when"><span class="adminlink"></span> 2:23 PM on 2 Mar 2007</span>
		</div>
		
		<p class="commenttext">
			Sigh.
<br>
<br>Or, rather,
<br>
<br>Result&lt;int&gt; ri = obj.DoStuff();
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/22522eca2accbecd3670d3d44e375a59.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Trevor</b></span>
			<span class="when"><span class="adminlink"></span> 5:11 PM on 27 Nov 2008</span>
		</div>
		
		<p class="commenttext">
			I almost always have 1 entry point to functions (obviously) and 1 exit point.  
<br>
<br>Exceptions allow for poor programmers to do really nasty things, it is similar to why most programming courses tell you never to use gotos, its not that gotos can't be used effectively, and same with exceptions, its just it requires a lot of thought and planning, and you making your own rules involving their use.
<br>
<br>I do not like your first snippet, I would do it like this:
<br>
<br>STATUS DoSomething(int a, int b)
<br>{
<br>    STATUS st;
<br>    st = DoThing1(a);
<br>    if (st == SGOOD)
<br>    {
<br>        // only do thing 2 if thing1 is good
<br>        st = DoThing2(b);
<br>    }
<br>    return st;
<br>}
<br>
<br>If you were to add more "things" and needed to different things when different errors occured you'll find the status technique is a lot easier to follow.
<br>
<br>From my experience it really depends on what I'm doing, in general status's make it harder to whip out code really fast, and error handling code is more spread out, but it does result in less buggy code.  If I am writing short scripts to do work for me, exceptions are awesome, I love them! You hardly need to write error handling code because you will get a nice error message to the screen when it crashes, but if you are writing a big system that will cause a catastrophe if it crashes and doesn't have a user sitting there watching the screen then using exceptions can be really tricky, most people can't do it, and it will result in buggy code. Imagine the code that controls airplanes was written using exceptions, the thought of that scares me.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/1b65cff9d3b3220c0b7cbf36c2b41561.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Josh W</b></span>
			<span class="when"><span class="adminlink"></span> 2:20 PM on 29 Jan 2009</span>
		</div>
		
		<p class="commenttext">
			&gt;Why is everybody bashing goto? Goto is almost required for error handling with &gt;status codes. For instance, if we do three things, createDirectories, installFiles, &gt;updateRegistry, we have multiple things to undo on failure: 
<br>
<br>Absolutely not.
<br>Create an enum and throw this enum, catch and do a switch( my_error_enum ), which by nature cascades through (unless on break), and cleanup in reverse order of the function calls.
<br>
<br>I wouldn't hire anyone that used goto's, or returned error values. Ever.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/eb0a4d80ac384f12a36e1c43ca72d2e7.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Manuel</b></span>
			<span class="when"><span class="adminlink"></span> 6:47 AM on 24 Mar 2009</span>
		</div>
		
		<p class="commenttext">
			Hi,
<br>
<br>i'm with Joel.
<br>
<br>the sample should be more like:
<br>STATUS DoSomething(int a, int b) 
<br>{ 
<br>   STATUS retVal = DoThing1(a); 
<br>
<br>   if (retVal == SGOOD) 
<br>      retVal = DoThing2(b); 
<br>
<br>   return retVal; 
<br>} 
<br>
<br>This is absolutely fine, especially if someone else wants to 
<br>change or extend it in the future, because it is 
<br>obvious what to do e.g.:
<br>
<br>STATUS DoSomething(int a, int b) 
<br>{ 
<br>   STATUS retVal = DoThing1(a); 
<br>
<br>   //this works always!!!
<br>   DoSomethingImportant(a);
<br>
<br>   if (retVal == SGOOD)
<br>      retVal = DoThing2(b); 
<br>
<br>   return retVal; 
<br>} 
<br>
<br>that was easy, wasn't it? 
<br>
<br>Now lets have a look at Exception base code:
<br>
<br>void DoSomething(int a, int b)
<br>{
<br>    DoThing1(a);
<br>    //this does not!!! works always
<br>    DoSomethingImportant(a);
<br>    DoThing2(b);
<br>}
<br>
<br>In a big Project it is absolutely standard that different people manage the same code within several years. 
<br>This has nothing to do with skillsets... but just only giving you the possibility to manage and extend 
<br>your code fast without checking the hole thing over and over again for a small change. like that.
<br>
<br>To make an extension like that in the sample above with exception based code you will have to rethink the whole 
<br>function and why and how the functions depend on each other.
<br>
<br>However the problem is not only about redesigning the exception based functions here to make it work, the bigger 
<br>problem is, that the person adding DoSomethingImportant(a); does not know about the other stuff and 
<br>introduces a bug that happens only sometimes depending on something totally different. 
<br>This just gets worse when you span the sample above over a hierarchy of methods.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/61f158aa4562a96111ca7efc33e468e8.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Mikael Thomsen</b></span>
			<span class="when"><span class="adminlink"></span> 4:48 PM on 23 Sep 2009</span>
		</div>
		
		<p class="commenttext">
			I am with Ned :-)
<br>
<br>The "DoSomethingImportant" should properly be put into a finally block.
<br>
<br>Throwing an exception should be considered in situations where the function/code cannot complete the job it is designed for.
<br>
<br>Return values should be used for returning data to the caller.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/1ac4ea60ca37bf7f3ebebb1428d3d895.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>rs</b></span>
			<span class="when"><span class="adminlink"></span> 9:06 AM on 18 Mar 2010</span>
		</div>
		
		<p class="commenttext">
			You are not helping by highlighting google search terms, only making it more annoying until I reload the page. If I wanted the terms highlighted I would have viewed the "cached" link. I don't get why people add this crap feature to their blogs.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/3c38a3fa5549c929f7b46f0afc556eae.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Manuel</b></span>
			<span class="when"><span class="adminlink"></span> 2:09 PM on 18 Mar 2010</span>
		</div>
		
		<p class="commenttext">
			@Mikael
<br>
<br>i think it is very difficult to define generally what is meant with:
<br>"function/code cannot complete the job it is designed for"
<br>
<br>The mentioned STATUS return value might be a Result (a custom class) containing status and return value, which btw is a pattern that works also between process/layer boundaries.
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/d41d8cd98f00b204e9800998ecf8427e(5).jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b><a href="http://amilkhanzada.blogspot.com/" rel="nofollow" target="_blank">Amil</a></b></span>
			<span class="when"><span class="adminlink"></span> 12:31 PM on 25 Dec 2010</span>
		</div>
		
		<p class="commenttext">
			Thanks for the guide. I think I will start using exeptions in my new project!
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/fb1f8606ed66e27362668fed92635b2c.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Daniel</b></span>
			<span class="when"><span class="adminlink"></span> 11:08 AM on 11 Mar 2011</span>
		</div>
		
		<p class="commenttext">
			I think that both are pretty much the same in terms of usefulness:
<br>
<br>With exceptions:
<br>*You can check them.
<br>*If the function fails and you don't check them your program will crash and say something that the user will not understand anyway.
<br>
<br>With error numbers and returns:
<br>*You can check them.
<br>*If the function fails and you don't check them your program will either:
<br> *crash and say something that the user will not understand anyway (likely)
<br> *crash silently (also likely)
<br> *complete execution successfully or semi-successfully
<br> *seriously and actively mess up something
		</p>
	</div>
	<div class="comment">
		<img class="gravatar" src="./Ned Batchelder  Exceptions vs. status returns_files/e4bcb4061e0cc9086fa559a04ee90c1f.jpg" width="40" height="40" alt="[gravatar]">
		<div class="head">
			<span class="who"><b>Mike</b></span>
			<span class="when"><span class="adminlink"></span> 2:56 AM on 15 Nov 2011</span>
		</div>
		
		<p class="commenttext">
			@Josh W, your "solution" is crap. It's more complicated, slow, and very hard to read. Don't just bash goto because you found people bashing it. There are times when goto is the right choice. Deal with it! And for your information, I wouldn't work for an employer like you too!
		</p>
	</div>

<div id="commentform">
<h2>Add a comment:</h2>
<div>
	<form method="post" action="http://nedbatchelder.com/text/exceptions-vs-status.html#commentform" id="commentformform">
		<table width="100%" border="0" cellspacing="0" cellpadding="2">
			<tbody><tr>
				<td width="0%">
					<div class="label">name</div>
				</td>
				<td width="100%">
					<input class="edit" type="text" name="f448c913c884f0860950cb67e25da9440" id="f448c913c884f0860950cb67e25da9440" size="40" value="">
				</td>
			</tr>
			<tr>
				<td>
					<div class="label">email</div>
				</td>
				<td>
					<div style="display:none">
					Ignore this:
					<input class="edit" type="email" name="f51b53b0693f38707f12658f80c031ff6" id="f51b53b0693f38707f12658f80c031ff6" size="40">
					</div>
					<input class="edit" type="email" name="fd09391929ef214d74a833c6a9184c09d" id="fd09391929ef214d74a833c6a9184c09d" size="40" value="">
					<span class="notice">not displayed and no spam.</span>
					<div style="display:none">
					Leave this empty:
					<input class="edit" type="email" name="fedd52104ac7362cc40909de679ac5b90" id="fedd52104ac7362cc40909de679ac5b90" size="40">
					</div>
				</td>
			</tr>
			<tr>
				<td>
					<div class="label">www</div>
				</td>
				<td>
					<input class="edit" type="url" name="ffcc5332b29da5ba69d85cff904882b9a" id="ffcc5332b29da5ba69d85cff904882b9a" size="40" value="">
					<span class="notice">not searched.</span>
				</td>
			</tr>
			<tr>
				<td>&nbsp;</td>
				<td>
					<div class="notice">Name and either email or www are required.</div>
				</td>
			</tr>
			<tr>
				<td colspan="2">
					<div align="center" style="display:none">
						Don't put anything here:
						<textarea name="f0725bd3de2068ddf3bdb47a3dc1bda9a" id="f0725bd3de2068ddf3bdb47a3dc1bda9a" rows="7" cols="77" style="width:100%"></textarea>
					</div>
					<div align="center">
						<textarea name="f017f945f1c17d337dec2cba56934083b" id="f017f945f1c17d337dec2cba56934083b" rows="7" cols="77" style="width:100%"></textarea>
					</div>
					<div align="center" style="display:none">
						Leave this empty:
						<textarea name="ff36d5f3243080dfb7e0d2fbfbda4cd63" id="ff36d5f3243080dfb7e0d2fbfbda4cd63" rows="7" cols="77" style="width:100%"></textarea>
					</div>
				</td>
			</tr>
			<tr>
				<td colspan="2" class="notice" align="right">
					URLs auto-link and some tags are allowed: &lt;a&gt;&lt;b&gt;&lt;i&gt;&lt;p&gt;&lt;br&gt;&lt;pre&gt;.
				</td>
			</tr>
			<tr valign="top">
				<td colspan="2">
					<div align="right">
						<label for="cbnotify">
							<input type="checkbox" name="f50a096c31673bf38ff0866e94a1027d5" id="cbnotify">
							<span class="label">Email me future comments</span>
						</label>&nbsp;&nbsp;
						<input id="previewbtn" type="submit" name="f208b7dc7b1469e2530d9045b620855f4" value="preview &gt;&gt;">
						<span style="display:none">
						<input type="submit" name="fccc93cb4da65ef1db02e0715e944a26a" value="I&#39;m a spambot">
						</span>
					</div>
				</td>
			</tr>
		</tbody></table>
		<input type="hidden" name="f89d58de36c5c9bccfd88e6114c1e3656" value="text/exceptions-vs-status.html">
		<input type="hidden" name="spinner" value="86d115eb591e57935ff4a3971a0d2e39">
		<input type="hidden" name="f18a345cf2266d6944c0fed76c7073066" value="1321498621">



	</form>
</div>
</div>

</div>
</div></td><td id="menu" valign="top"><div class="sidebar">


<div class="blogroll"><ul class="first"><li>Search this site:
            
<form action="http://www.google.com/cse" id="searchbox_007818501792991951010:s9hiibxg-ty" style="margin-top:6px;"><input type="hidden" name="cx" value="007818501792991951010:s9hiibxg-ty"><table cellpadding="0" cellspacing="0"><tbody><tr><td valign="middle"><input type="text" name="q" style="border-top-width: 1px; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-top-style: solid; border-right-style: solid; border-bottom-style: solid; border-left-style: solid; border-top-color: rgb(126, 157, 185); border-right-color: rgb(126, 157, 185); border-bottom-color: rgb(126, 157, 185); border-left-color: rgb(126, 157, 185); padding-top: 2px; padding-right: 2px; padding-bottom: 2px; padding-left: 2px; width: 144px; height: 16px; background-image: url(http://www.google.com/coop/intl/en/images/google_custom_search_watermark.gif); background-attachment: initial; background-origin: initial; background-clip: initial; background-color: rgb(255, 255, 255); background-position: 0% 50%; background-repeat: no-repeat no-repeat; "></td><td valign="middle"><input id="submit" type="image" title="Search" src="./Ned Batchelder  Exceptions vs. status returns_files/search.png"></td></tr></tbody></table></form><script type="text/javascript">
    (function() {
        var f = document.getElementById('searchbox_007818501792991951010:s9hiibxg-ty');
        if (f && f.q) {
            var q = f.q;
            var b = function() {
                if (q.value == '') {
                    q.style.background = '#fff url(http:\x2F\x2Fwww.google.com\x2Fcoop\x2Fintl\x2Fen\x2Fimages\x2Fgoogle_custom_search_watermark.gif) left no-repeat';
                }
            };
            var f = function() {
                q.style.background = '#fff';
            };
            q.onfocus = f;
            q.onblur = b;
            if (!/[&?]q=[^&]/.test(location.search)) {
                b();
            }
        }
    })();
</script></li><li class="first"><a href="http://nedbatchelder.com/site/aboutned.html" rel="author">About me</a></li><li><a href="http://flattr.com/thing/343733/Neds-stuff" target="_blank"><img src="./Ned Batchelder  Exceptions vs. status returns_files/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" width="93" height="20"></a></li><li>You might like:
            <ul class="compact"><li>Â»&nbsp;<a href="http://nedbatchelder.com/blog">My blog</a></li><li>Â»&nbsp;<a href="http://susansenator.com/makingpeace.html">My wife's books</a><br><a href="http://susansenator.com/makingpeace.html"><img src="./Ned Batchelder  Exceptions vs. status returns_files/makingpeacetiny.png" alt="Making Peace With Autism" width="83" height="127" style="margin: 10px 0 0 0"></a> <a href="http://susansenator.com/survivalguide.html"><img src="./Ned Batchelder  Exceptions vs. status returns_files/survivalguidetiny.png" alt="Autism Mom&#39;s Survival Guide" width="86" height="121" style="margin: 10px 0 0 10"></a></li></ul></li></ul></div>

</div></td></tr><tr><td id="copyright" colspan="2"><p class="copyright"><a rel="copyright license" href="http://nedbatchelder.com/site/legal.html">
                            Â© Copyright
                            
                                2003,
                            
                            Ned Batchelder
                        </a></p></td></tr></tbody></table></center><script type="text/javascript" language="javascript">
var hs_portalid=18610; 
var hs_salog_version = "2.00";
var hs_ppa = "nedbatchelder.app101.hubspot.com";
document.write(unescape("%3Cscript src='" + document.location.protocol + "//" + hs_ppa + "/salog.js.aspx' type='text/javascript'%3E%3C/script%3E"));
</script><script src="./Ned Batchelder  Exceptions vs. status returns_files/salog.js.aspx" type="text/javascript"></script><script src="./Ned Batchelder  Exceptions vs. status returns_files/salog20.js" type="text/javascript"></script><span id="hsjssp"></span>

</body></html>