<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0369)http://cache.baidu.com/c -->
<!--STATUS OK--><HTML><HEAD>
<META content=text/html;charset=gb2312 http-equiv=Content-Type>
<STYLE>BODY {
	MARGIN: 4px 0px
}
#bd_sn_h {
	TEXT-ALIGN: left; BACKGROUND-COLOR: #ffffff; COLOR: #000000
}
#bd_sn_h #p1 {
	PADDING-BOTTOM: 0px; MARGIN: 0px 0px 0px 2px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT: 14px Arial; CLEAR: both; PADDING-TOP: 4px
}
#bd_sn_h A {
	COLOR: #0000ff; TEXT-DECORATION: underline
}
#bd_sn_h #p1 A {
	FONT-WEIGHT: bold
}
#baidu DIV {
	POSITION: static
}
</STYLE>

<META name=GENERATOR content="MSHTML 8.00.7600.16385"></HEAD>
<BODY>
<TABLE id=baidu border=0 cellSpacing=0 cellPadding=0 width="100%">
  <TBODY>
  <TR>
    <TD>
      <DIV style="TEXT-ALIGN: left; BACKGROUND-COLOR: #ffffff; COLOR: #000000">
      <DIV style="MARGIN: 6px 18px 0px 10px; FLOAT: left"><A 
      href="http://www.baidu.com/"><IMG 
      style="BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: 0px" 
      alt=到百度首页 src=""></A></DIV>
      <DIV style="MARGIN: 27px 0px 0px; FLOAT: left">
      <FORM 
      style="PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px" 
      action=http://www.baidu.com/s><INPUT style="FONT: 16px Arial" size=35 
      name=wd> <INPUT value=百度一下 type=submit> <INPUT value=3 type=hidden 
      name=cl> </FORM></DIV>
      <P 
      style="TEXT-ALIGN: left; PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #ffffff; MARGIN: 0px 0px 0px 2px; PADDING-LEFT: 0px; WIDTH: 100%; PADDING-RIGHT: 0px; FONT: 14px Arial; COLOR: #000000; CLEAR: both; PADDING-TOP: 4px">您查询的关键词是：<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black"><A 
      href="http://cache.baidu.com/c?m=9f65cb4a8c8507ed4fece763105392230e54f72263918a027fa3c41ed4735b36163afeeb776345558e996b6776ed131efdf142226a5060e18cc9fe3bbfe5d5694dd66075671c821d558c0eaebd4724c734d507a9f916b6adf04284aea2c4df25118a085a2dc0e78b2b1764c97881672693d78e3910&amp;p=8060c54ad1c81bfe0be293271347&amp;user=baidu&amp;fm=sc&amp;query=c%2B%2B+primer+%B1%CA%BC%C7&amp;qid=c3eaef6a0f28b0bd&amp;p1=8#baidusnap0">c++</A>&nbsp;</B><B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black"><A 
      href="http://cache.baidu.com/c?m=9f65cb4a8c8507ed4fece763105392230e54f72263918a027fa3c41ed4735b36163afeeb776345558e996b6776ed131efdf142226a5060e18cc9fe3bbfe5d5694dd66075671c821d558c0eaebd4724c734d507a9f916b6adf04284aea2c4df25118a085a2dc0e78b2b1764c97881672693d78e3910&amp;p=8060c54ad1c81bfe0be293271347&amp;user=baidu&amp;fm=sc&amp;query=c%2B%2B+primer+%B1%CA%BC%C7&amp;qid=c3eaef6a0f28b0bd&amp;p1=8#baidusnap1">primer</A>&nbsp;</B><B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black"><A 
      href="http://cache.baidu.com/c?m=9f65cb4a8c8507ed4fece763105392230e54f72263918a027fa3c41ed4735b36163afeeb776345558e996b6776ed131efdf142226a5060e18cc9fe3bbfe5d5694dd66075671c821d558c0eaebd4724c734d507a9f916b6adf04284aea2c4df25118a085a2dc0e78b2b1764c97881672693d78e3910&amp;p=8060c54ad1c81bfe0be293271347&amp;user=baidu&amp;fm=sc&amp;query=c%2B%2B+primer+%B1%CA%BC%C7&amp;qid=c3eaef6a0f28b0bd&amp;p1=8#baidusnap2">笔记</A>&nbsp;</B> 
      。如果打开速度慢，可以尝试<A 
      style="COLOR: #0000ff; FONT-WEIGHT: bold; TEXT-DECORATION: underline" 
      href="http://cache.baidu.com/c?m=9f65cb4a8c8507ed4fece763105392230e54f72263918a027fa3c41ed4735b36163afeeb776345558e996b6776ed131efdf142226a5060e18cc9fe3bbfe5d5694dd66075671c821d558c0eaebd4724c734d507a9f916b6adf04284aea2c4df25118a085a2dc0e78b2b1764c97881672693d78e3910&amp;p=8060c54ad1c81bfe0be293271347&amp;user=baidu&amp;fm=sc&amp;query=c%2B%2B+primer+%B1%CA%BC%C7&amp;qid=c3eaef6a0f28b0bd&amp;p1=8&amp;fast=y">快速版</A>；如果想保存快照，可以<A 
      style="COLOR: #0000ff; FONT-WEIGHT: bold; TEXT-DECORATION: underline" 
      onclick="window.open('http://cang.baidu.com/do/add?it='+encodeURIComponent(document.title)+'&amp;iu='+encodeURIComponent(location.href)+'&amp;fr=ps#nw=1','_s','scrollbars=no,width=600,height=450,right=75,top=20,status=no,resizable=yes'); return false;" 
      href="http://cang.baidu.com/do/add" target=_blank>添加到搜藏</A>。</P>
      <P 
      style="BACKGROUND-COLOR: #ffffff; MARGIN: 0px 2px; FONT: 12px Arial; COLOR: gray">(百度和网页<A 
      style="COLOR: #0000ff; TEXT-DECORATION: underline" 
      href="http://www.smth.edu.cn/bbsgcon.php?board=CPlusPlus&amp;num=334">http://www.smth.edu.cn/bbsgcon.php?board=CPlusPlus&amp;num=334</A>的作者无关，不对其内容负责。百度快照谨为网络故障时之索引，不代表被搜索网站的即时页面。)</P>
      <HR style="MARGIN: 8px 0px; WIDTH: 100%">
      </DIV></TD></TR></TBODY></TABLE>
<DIV style="POSITION: relative"><?xml version="1.0" encoding="gb2312"?>
<META name=Keywords content=BBS,水木,清华,水木清华,清华水木,SMTH,Blog,论坛,校园,大学,自强不息,厚德载物>
<META name=Description content=清华大学唯一的校级BBS，热烈欢迎大家><LINK rel=stylesheet 
type=text/css href="/default.css">
<CENTER>
<P>BBS 水木清华站 -- 文章阅读 [讨论区: CPlusPlus]</A></P></CENTER>[<A 
href="http://www.smth.edu.cn/bbssec.php">分类讨论区</A>] [<A 
href="http://www.smth.edu.cn/bbsdoc.php?board=CPlusPlus">返回版面</A>] [<A 
href="http://www.smth.edu.cn/bbsgdoc.php?board=CPlusPlus&amp;page=0">返回文摘区</A>] 
[<A href="javascript:history.go(-1)">快速返回</A>] 
<HR class=default>

<TABLE border=0 width=610>
  <TBODY>
  <TR>
    <TD>发信人:&nbsp;Cray&nbsp;(克雷),&nbsp;信区:&nbsp;CPlusPlus<BR>标&nbsp;&nbsp;题:&nbsp;<A 
      name=baidusnap0></A><B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">C++</B>&nbsp;<A 
      name=baidusnap1></A><B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black">Primer</B>&nbsp;读书<A 
      name=baidusnap2></A><B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>(owl2008原创)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cray&nbsp;<BR>发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Mon&nbsp;Jun&nbsp;28&nbsp;15:08:07&nbsp;2004),&nbsp;站内<BR><BR>发信人:&nbsp;owl2008&nbsp;(owl),&nbsp;信区:&nbsp;CPlusPlus<BR>标&nbsp;&nbsp;题:&nbsp;《<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>&nbsp;<B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black">primer</B>》读书<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>说明<BR>发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Mon&nbsp;Jun&nbsp;28&nbsp;14:02:19&nbsp;2004),&nbsp;站内<BR><BR><B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>说明:<BR>实话说，我真的不知道面对这样一本名满天下的书，该如何去读、以怎样的态度去读、带着怎样的问题去读。按照作者的意见，我尽量以一个对<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">C++</B>一无所知的初学者的身份来理解这本书(事实上，我本来就是初学者)，希望得到较好的效果，为了写下点滴体会，为了避免每次写的太杂而造成主题不明，我想把<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>篇幅以书中的小节为单位来写，当然由于我有限的编程学习时间和经验，难免肤浅，大家多多指点。这也是我写这个<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>的根本目的。<BR><BR>注：本<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>用的是中国电力出版社的《<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>&nbsp;<B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black">primer</B>》第三版中译本，潘爱民主编的。有时候会参考原著。<BR><BR>--<BR>ID&nbsp;owl<BR>MSN:lingjiexyz@hotmail.com<BR>QQ:85475939<BR>BLOG：http://owl2008.blogone.net/<BR><BR>※&nbsp;修改:・Cray&nbsp;于&nbsp;Jun&nbsp;28&nbsp;15:15:42&nbsp;修改本文・[FROM:&nbsp;211.167.41.*]<BR>※&nbsp;来源:・BBS&nbsp;水木清华站&nbsp;http://smth.org・[FROM:&nbsp;220.184.31.*]<BR>发信人:&nbsp;owl2008&nbsp;(owl),&nbsp;信区:&nbsp;CPlusPlus<BR>标&nbsp;&nbsp;题:&nbsp;《<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>&nbsp;<B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black">primer</B>》读书<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>1<BR>发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Mon&nbsp;Jun&nbsp;28&nbsp;14:04:07&nbsp;2004),&nbsp;站内<BR><BR><B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>的范围：第一篇的引言和1.1节<BR><BR>因为以前的读书习惯，我对这本书的开头抱着一种轻视的态度。自以为是的认为那不过是类似开场白那样的成篇废话。事实证明我错了。在不到四页的内容里。作者就一点不给面子的指出了我在读这本书之前的几个错误观点、<BR>第一：对oop的理解，这里我不得不指出在国内大部分本科教材中把封装性作为oop的独有的特点之一、以至于让很多人(包括我)认为写了个class就进入了oop的大门，这本书就明确的指出数据的封装只是对象的特点。是ADT的结果，设计方法的划分中属于基于对象（object&nbsp;based），没有inheritance机制和dynamic&nbsp;binding（动态绑定）的扩展就根本谈不上oop。<BR>第二：对<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>的认识。作者明确指出<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>是一种多种设计方法集于一体的语言。而我们更多的是把他作为一种oop的语言来学习，把<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>理解为带类的c，个人认为这种错误的观点导致的一个严重的问题是，我们带着c的思想来学习<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>，使得我们在应用过程中用的是<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>东西。比如class。I/o流，但是我们思想还是c的，这使得我们难以接受oop以及其他设计方法；这使得我对认为学习<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>，未必要学c的这种观点的真理性更深信不疑、<BR>第三：对编程习惯的认识。在1.1节中作者提出了一个问题。而不是像很多教材千篇一律的以“hello&nbsp;world”开头。其实，我一直反对学习一种语言一上来就动手的习惯、正如这本书那样，从思维入手，对于任何问题都以一个工程的态度去面对，在这里作者提出了分而治之和独步求精的思想。对于一个还没养成坏习惯的初学者来说，这好处实在不可估量。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<BR><BR>--<BR>ID&nbsp;owl<BR>MSN:lingjiexyz@hotmail.com<BR>QQ:85475939<BR>BLOG：http://owl2008.blogone.net/<BR><BR>※&nbsp;来源:・BBS&nbsp;水木清华站&nbsp;http://smth.org・[FROM:&nbsp;220.184.31.*]<BR>发信人:&nbsp;owl2008&nbsp;(owl),&nbsp;信区:&nbsp;CPlusPlus<BR>标&nbsp;&nbsp;题:&nbsp;《<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>&nbsp;<B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black">primer</B>》读书<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>2<BR>发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Mon&nbsp;Jun&nbsp;28&nbsp;14:06:34&nbsp;2004),&nbsp;站内<BR><BR><B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>的范围：1.2节<BR><BR>在1.1节中，作者提出一个问题并用分而治之和独步求精的思想给出了解决方案，我在这里再重复一遍。在学习一个新东西之前。该从它的思想入手，我的建议是：在读完第二篇之前最好不要动手上机，这样做的好处是你可以避免很多莫名其妙的笨问题。关于这点，我会在以后的<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>中试图证明。<BR>在本节中，作者又提出了一种重要的东西。渐进式设计方法，我第一次看到这种方式是在那本伟大的《The&nbsp;C&nbsp;Programming&nbsp;Language》中，这种思想对于我来说实在是受益匪浅。作者在这里的解释是：“为控制在一个程序中不可避免的错误提供了一个良好的方法&nbsp;，”在我看来。其好处远远不止如此。在学习过程中，这种方法使得我们更清楚的知道每次增加的新东西的作用，这个好处在本节中得到了很好的体现。在这个设计过程中，作者教给我们四个方面的东西。最基础的东西。<BR>第一：基本概念，很多人认为，这本书不适合真正意义上的初学者。在今年第二期《程序员》中就提到：在读这本书之前。你至少要有那么一点编程知识，个人认为这样的说法不是绝对的。只要你认真的读。深入的理解这部分内容，什么是深入的理解呢？举个例子：在讲到标识符的时候，作者提出了两个其它的名字。符号变量和对象。有点经验的人都知道。变量和对象是有区别的，那么当我们写下这样的句子时<BR>int&nbsp;a;<BR>我们是否能肯定a是一个整数变量呢？还是int类的对象呢？当然，我们如果增加点东西就能判断了。<BR>int&nbsp;a=10;//显然，这是一般变量的用法<BR>int&nbsp;a（10）//这几乎是类对象的方法<BR>除了引言中简单的说明，我们还没得到更多的关于对象的解释。我们还不能肯定。但是做这样的思考是我们能做的。对初学者要求太高？or&nbsp;yes，但是对这种习惯的养成是绝对必要。<BR>第二：关于编译器的有关说明，这块我最大的收获是明白了using和。h的关系，很多初学者的讨论就是关于这个。这也是一上来就动手的弊端，他们根本不明白自己在用什么东西。况且页底的说明告诉我们这还要看编译器的情况。因此有时候这个是对的，换了个地方就错了。看了这段，至少节省了你很多问笨问题的时间。接下来是编译器的查错功能。显然这儿只有两类。这可以告诉了你对于编译出错的候，你要努力的方向。<BR>第三：关于数据类型。这里作者告诉我们两类数据类型，那就是内置的基本数据类型和扩展的基本数据类型。在读这段的时候。有两个问题使我非常纳闷，第一个问题是：我们那可悲的&nbsp;本科教材中内置的少了一个（bool），扩展的完全没有。我把这个问题扔给了我的教授。可是他的回答使我更纳闷了。他说这些是新东西（他指的是1998年的标准。前言中有说明）、关于这点，我不方便说什么（我期末的生杀大权在他手里）。我只想提醒大家现在2004年了。我的另一个问题是为什么没有数组和指针？在我读到2.1节前这个问题一直留着。我在这里不想说我的理解。我只想给初学者一个建议，第一篇的东西是有点难度的，我们该学会在读这些东西时，提出自己的问题并且给出自己认为合理的答案，或者干脆留在脑子里，到你悟了，你会感到无比的。。。恩。我把它叫做“成就感”吧<BR>第四：控制语句。这块。我说不出什么新东西。可能我已经不算是对编程一无所知的人吧，容我什么时候找个小朋友，谈谈他的感觉再说吧、<BR><BR>--<BR>ID&nbsp;owl<BR>MSN:lingjiexyz@hotmail.com<BR>QQ:85475939<BR>BLOG：http://owl2008.blogone.net/<BR><BR>※&nbsp;来源:・BBS&nbsp;水木清华站&nbsp;http://smth.org・[FROM:&nbsp;220.184.31.*]<BR>发信人:&nbsp;owl2008&nbsp;(owl),&nbsp;信区:&nbsp;CPlusPlus<BR>标&nbsp;&nbsp;题:&nbsp;《<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>&nbsp;<B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black">primer</B>》读书<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>3<BR>发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Mon&nbsp;Jun&nbsp;28&nbsp;14:20:29&nbsp;2004),&nbsp;站内<BR><BR><B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>范围：1.3节到1.4节<BR><BR>说来惭愧，在学c的时候对于1.3节中所讲的内容就没有好好读过，以至于在相当长的一段时间里，过得糊里糊涂的，当然，主要的责任在我自己。但是，背了这么大的罪，有点不甘心。恩，得找点理由。我的理由是：正如大部分朋友那样，学c是从谭浩强那本书开始的，单文件的习惯简直是深入人心。在大谈特谈之后。他老人家大概觉得不好意思，书的最后才拿出来亮下，而我这个笨蛋自以为读了那么多，已经大功告成了，也没放在心上，上面的这些废话，只想说明一点。那就是读好书是绝对必要的。<BR>在1.3节里，作者以最简单的语言回答了初学者一定会问的笨问题：<BR>第一：很多人都会问。#include&lt;&gt;和#include”&nbsp;”有什么区别？书上的回答很明白，对头文件查找的方式不同而已。可能我们唯一不满意的是。作者没有告诉我们什么是预定义的目录，汗，看来作者还是高估了我们这些可怜的人，所谓预定义的目录就是我们通常说的系统目录。标准库文件所在的地方，再说的直接点。就是你安装编译器所在的那个目录的某个子目录。什么是当前用户目录？别玩我了，你一定知道的。除非你没用过操作系统。<BR>第二：<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>对c的兼容性是大家都知道的。但是我们会很奇怪的发现当我们根据<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>的标准写法写下如下句子时<BR>&nbsp;&nbsp;&nbsp;＃include&lt;stdio&gt;<BR>&nbsp;&nbsp;&nbsp;using&nbsp;namespace&nbsp;std;<BR>编译器很不给面子。作者告诉我们原来c名字和<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>名字是不同的。也就是说在名字空间std里根本就没有stdio这个东西。所有的c名字在<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>名字中都得加个c前缀，在也证明了我在上篇<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>里说的。一上来就动手上机的一大弊端就是我们根本不知道自己在用什么。出了错当然也就莫名其妙了，<BR>第三：由于<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>对c的兼容，我们也许会问：我怎么知道那个是c文件，那个是<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>文件呢？看扩展名？这是个主意，但是，有个不幸的消息。作者已经多次告诉我们在不同的系统里文件的扩展名是不同的，作者告诉我们一个很好的方法：用宏，<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>有个“__cplusplus”c有个“__STDC__”这两个名字不会同时存在。ok，这样的话，我们#ifndef或者#ifdef就可以了，另外，作者还告诉我们四个宏，对初学者来说几呼没什么用？呵呵，多懂点也是好的，这也是作者对我们的信任，不像某些教材，，，，唉，不提也罢，什么是初学者的东西。什么不是。谁有这个权力判断呢？除了你自己，教育者的任务该是把完整的东西拿来看，取舍是学生的事情，不是吗？<BR>除了上面这些知识外，作者还告诉我们该养成那些好习惯。比如写头文件时，该写成如下形式：<BR>&nbsp;&nbsp;&nbsp;#ifndef&nbsp;&nbsp;FILENAME_H<BR>&nbsp;&nbsp;&nbsp;#define&nbsp;FILENAME_H<BR>&nbsp;&nbsp;&nbsp;//文件主体，<BR>&nbsp;&nbsp;&nbsp;#endif<BR>以便当文件包涵层次多了犯糊涂，另外这里还有个暗示：鼓励写多文件程序，这样可以避免一个文件过长难以读懂，我当年就写过一个长达1100行的文件。修改时，我自己都晕了。还有个好处是，当我们学习I/O时文件操作就成可以理解的东西了，尽管两者关系不大。但是这是一种思维习惯，如果你只写单文件的东西。你怎么理解文件外的操作呢？<BR>还有一种习惯就是注释，我把它并到这里来写，是因为它简单，但是简单并不意味着不重要，相反，它很重要。无论在任何时候我们都不要忘记，人类能成为整个世界的主宰，是因为我们的合作能力超过了任何一种生物（不明生物除外）。而注释正是为你以后的合作提供方便，因为你的设计灵感是很容易忘记的，到时候，连自己都不知道。这段代码干嘛的?&nbsp;<BR><BR>--<BR>ID&nbsp;owl<BR>MSN:lingjiexyz@hotmail.com<BR>QQ:85475939<BR>BLOG：http://owl2008.blogone.net/<BR><BR>※&nbsp;来源:・BBS&nbsp;水木清华站&nbsp;http://smth.org・[FROM:&nbsp;220.184.16.*]<BR>发信人:&nbsp;owl2008&nbsp;(owl),&nbsp;信区:&nbsp;CPlusPlus<BR>标&nbsp;&nbsp;题:&nbsp;《<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>&nbsp;<B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black">primer</B>》读书<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>4<BR>发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Mon&nbsp;Jun&nbsp;28&nbsp;14:24:50&nbsp;2004),&nbsp;站内<BR><BR><B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>范围：1.5节<BR><BR>本节的内容不是很难，学过一点编程的人都会很容易接受，但是，我一直以来就有一种感觉。自己用的最多但又用的最糊涂的也就是i/o系统，很明显i/o实现了对计算机设备的直接操作。在<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>里我们知道它是通过ios类的对象来完成的。从感觉上讲，远远不如c来的直接，明白。当然这样做的好处是大大简单了我们的操作，但是不幸的是这会给我们的理解造成一定的困难，下面我将提出自己疑问。<BR>第一，&nbsp;&nbsp;&nbsp;&nbsp;大家都知道，我们的io操作是通过三个对象来完成的。cin、cout、cerr。作者在描述的时候用了“绑定”这个词，很明显被抽象的数据类型和具体设备实现了完美的对接。但是我的问题是，从ADT的思路来说，这些对象封装了那许数据？提供那些操作？这些数据和接口是如何对设备进行控制的？很显然，以我们现在的知识很难回答这些问题。就算是自以为合理的估计也不能，但是这样的思考，有助于我们对类设计思维的熟悉，但是思考到此为止罢。不然我就误人子弟了。<BR>第二，&nbsp;&nbsp;&nbsp;&nbsp;还有一个问题，初学者也许会问，作者告诉我们cout和cerr都可以用来输出。他们的区别一个是一般的输出，一个是输出错误信息。可是这样的解释并不能使我们这些好奇的人满意。于是我做了个恶作剧，改写了我们那个知名的”hello&nbsp;world!”<BR>int&nbsp;main()&nbsp;{<BR>&nbsp;&nbsp;cerr&lt;&lt;”hello&nbsp;world!”&lt;&lt;endl;<BR>&nbsp;&nbsp;return&nbsp;1;<BR>}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事实证明&nbsp;用户如果不看代码。他们不会知道自己看到的是个err。那么这两个对象的区别只是个习惯或约定吗？我们同样不能解释。把它留着罢，相信总会“悟”的<BR>第三，&nbsp;&nbsp;&nbsp;&nbsp;我想谈谈那个“endl”，在很多教材里把它等价于”\n”正确吗？no,你可以写下如下句子。<BR>cout&lt;&lt;”aaa”；<BR>a=getchar();//.假设a已经定义<BR>cout&lt;&lt;a;<BR>在VC6中你会发现输入输出的顺序乱了(刚才在V<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">C++</B>.NET&nbsp;2003又恢复正常了、奇怪。因此不建议在<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>中用c的东西)，为什么呢?作者告诉我们endl除了\n的功能外还有个刷新的功能，刷新什么？看仔细点，刷新缓冲区。什么是缓冲区？哦。这个问题也许你需要一些别的知识，比如。《计算机组成原理》<BR>关于文件的操作，与单文件非常类似，唯一要注意的是流进出的参照物、内存？or&nbsp;文件？<BR><B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>的最后，我还是要提醒大家。我提出了很多牛角尖的问题。只是对初学者的思考方法提出一些个人建议。对于这些问题本身有些并没有讨论价值。有些不是现在该解决的问题。在这节里你的任务其实很简单，搞清每个对象和运算符的作用。就是这样，<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>之父把<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>说成难学易用的语言，我们可以理解这句话的涵义。要不断的想起这句话，<BR><BR>--<BR>ID&nbsp;owl<BR>MSN:lingjiexyz@hotmail.com<BR>QQ:85475939<BR>BLOG：http://owl2008.blogone.net/<BR><BR>※&nbsp;来源:・BBS&nbsp;水木清华站&nbsp;http://smth.org・[FROM:&nbsp;220.184.16.*]<BR>发信人:&nbsp;owl2008&nbsp;(owl),&nbsp;信区:&nbsp;CPlusPlus<BR>标&nbsp;&nbsp;题:&nbsp;《<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>&nbsp;<B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black">primer</B>》读书<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>5<BR>发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Mon&nbsp;Jun&nbsp;28&nbsp;14:27:21&nbsp;2004),&nbsp;站内<BR><BR><B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>范围：2.1节到2.2节<BR><BR>很多人都会觉得第二章很难，作者在第一篇的引言中也提到：如果读者觉得第二章的内容难以理解，就跳过他。而个人认为这样做不是最好的选择，事实上，第一篇的目的在于对这语言有个很好的整体的理解，思维上的习惯，方法论的形成才是本章的重点，前面这些废话，是对我们将要面对的难度以及我们要采取的态度作一个简单的说明和建议，<BR>我们在第一章中学的那些东西，都是比较现成的、可以直接使用的、在用的过程中不太会受到语法上的限制的东西，我想大家还记得我在读到数据类型的时候，有过一个疑问：为什么那个时候作者不说数组？在2.1节里，作者给出了个答案：数组不属于基本型，什么是基本类型呢？作者的解释是：语言本身对该类型的赋值、一般算术运算和关系运算提供内置支持。显然数组和指针都不能满足这个条件，按作者的原话：他们不是一等公民，<BR>关于这两节的知识点。我想要说的并不多，对于学过一点编程的人来说数组和指针不是什么陌生的东西。在这本书的前言里作者就说过“这本书适合<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>的初学者，但不是适合编程的初学者”，但是这里仍然有两个很多初学者会犯的低级错误：<BR>数组方面：我来举个例子：<BR>&nbsp;&nbsp;&nbsp;Int&nbsp;a[8];.<BR>&nbsp;&nbsp;&nbsp;a[8]=10;<BR>这两个8几乎完全相同。事实是：在意义、作用上都完全是两回事，前者是size，后者是下标、这里我不得不产生一个疑问:[]运算符到底是干嘛的？在这里我们几乎第一次看到了一符多用的例子（也许不是，姑且这样认为）。<BR>指针方面。我见过很多类似这样的用法：&nbsp;<BR>&nbsp;&nbsp;int&nbsp;*p&nbsp;=&nbsp;NULL;<BR>&nbsp;cout&nbsp;&lt;&lt;&nbsp;*p&nbsp;&lt;&lt;&nbsp;end&nbsp;;<BR>显然，一个合格的程序员不会写这样的代码的、但是要不是一个朋友的提醒。我也就自以为是的认为它只能是个笨蛋的错误，这里有两个问题：NULL是什么？我以前很天真的把它和ASCII联系起来，事实上。它就是0。为一能的赋予p的值。接下来就是空间分配的问题了，我们都知道NULL的作用是不让指针指向任何对程序有用的空间。那么0放那呢？显然这儿有个关于空间的误解，那就是指针的空间和指针指向的空间是不同的。指针的空间是定义时已经分配了，但它只能放内存地址和NULL（p）,&nbsp;指向的空间是容器里的东西（*p），显然，上面的*p事实上并不存在。取一个不存在的东西，当然是不能不出毛病的。<BR>作者在这里很讲到new。一直以来我对new总是有点恐惧感，他远远不如c的函数来的明白，作者告诉我们它是动态分配内存的运算符。可是请注意作者对于动态分配的解释：“运行时刻库函数的行为”。库函数？no运算符？这里我们几乎感觉到了，函数和运算符之间存在着某种联系。再深入点思考，想想我们在开头提到的关于数组的缺点，数组不能进行某些运算？well，如果我们的假设成立，函数和运算符存在联系，那么我们自己是不是可以完善下我们的数组呢？事实证明我们是正确的。这就引出了ADT的思想－类的设计(后面的内容就是个不断设计完善的过程)。可见我们以前的学习方法存在一个大问题，我们不知道自己为什么要学一样东西，作者已经暗示我们这样的答案。需求引发灵感，灵感带动设计，设计成就技术，技术造成学习。学习满足需求<BR><BR><BR>--<BR>ID&nbsp;owl<BR>MSN:lingjiexyz@hotmail.com<BR>QQ:85475939<BR>BLOG：http://owl2008.blogone.net/<BR><BR>※&nbsp;来源:・BBS&nbsp;水木清华站&nbsp;http://smth.org・[FROM:&nbsp;220.184.16.*]<BR>发信人:&nbsp;owl2008&nbsp;(owl),&nbsp;信区:&nbsp;CPlusPlus<BR>标&nbsp;&nbsp;题:&nbsp;《<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>&nbsp;<B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black">primer</B>》读书<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>6<BR>发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Mon&nbsp;Jun&nbsp;28&nbsp;14:31:53&nbsp;2004),&nbsp;站内<BR><BR><B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>范围：2.3节<BR>早在2.1里作者就留给我们一个问题：要成为<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>的一等公民需要那些条件（练习2.2）？个人认为这个问题非常重要。它直接关系到我们对类的设计思想和努力的方向，显然我们的方向该是：尽可能的让我们设计的类成为语言的一等公民，换句话说，在类的设计中，对于运算符的支持要比一般的成员函数更重要，这样做的另一个考虑是为我们以后学习STL提供思维的延续，可见。如果我们只把<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>当成oo的语言，是不会这样想的&nbsp;，<BR>对于初学者来说，想在本节完全学会很好类的代码实现，几乎是不现实的，在本节的内容里，我们的任务是理解设计思路、了解类的基本结构，学会用伪代码设计一个能满足需求的class，下面是我在本节中所理解的东西，<BR>第一步：明确设计需求，我们可以仔细看一下作者写出的功能表，显然，就功能而言，它并不完善，但能满足一方的需求，这里我们可以感觉一下作者的专业品质：以用户需求为目标，我们的软件常常有这样问题，几百mb的程序，事实上我们真正用到的可能不足百分之一，成本和资源都得到很大的浪费，好像只满足了设计者的虚荣心，<BR>第二步：确定要封装的数据，当然，我们先要明白的是：封装的目的是为了保证对象数据的相对安全，要通分理解封装的涵义，比如：<BR>class&nbsp;a&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;int&nbsp;i<BR>&nbsp;public:<BR>&nbsp;&nbsp;&nbsp;….<BR>};<BR>class&nbsp;b&nbsp;{<BR>&nbsp;&nbsp;a&nbsp;s;<BR>&nbsp;public:<BR>&nbsp;&nbsp;….<BR>}<BR>几天前就有人问我这样的问题。，b是否可以操作s中的数据，答案是：yes。但是如果这样问。。s中的数据在b是否可用，答案则是，no，原因在于对于封装的数据而言，只有通过s自身的方法才有权使用。那么b如何操作s的数据呢？这就引出了第三步.<BR>第三步，设计公有接口。个人觉得接口和方法是有区别的，接口包括运算符和方法，当然他们都靠函数完成。但对函数的实现目标有着明显的不同，运算符考虑的是对象之间的关系。而方法考虑的是对象本身属性的操作，对于设计一个数据类型来说显然前者更重要，对于内置的数组来说。我们并没有考虑其本身的东西。但是，谁能说他不算class呢？不过不是我们设计的罢了，<BR>接下来，谈谈一些习惯问题，可能先看国内教材的人都会发现。在本书中public写在private之前。看起来好像没有多大的区别，其实我们应该发现，如果私有成员写前面关键字private可以不写，这不利于代码的可读性，我们要时刻为自己以后的合作提供良好习惯和代码风格。这样也该是程序员的基本素质之一吧？<BR><BR><BR>--<BR>ID&nbsp;owl<BR>MSN:lingjiexyz@hotmail.com<BR>QQ:85475939<BR>BLOG：http://owl2008.blogone.net/<BR><BR>※&nbsp;来源:・BBS&nbsp;水木清华站&nbsp;http://smth.org・[FROM:&nbsp;220.184.16.*]<BR>发信人:&nbsp;owl2008&nbsp;(owl),&nbsp;信区:&nbsp;CPlusPlus<BR>标&nbsp;&nbsp;题:&nbsp;《<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>&nbsp;<B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black">primer</B>》读书<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>7<BR>发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Mon&nbsp;Jun&nbsp;28&nbsp;14:34:33&nbsp;2004),&nbsp;站内<BR><BR>※&nbsp;来源:・BBS&nbsp;水木清华站&nbsp;http://smth.org・[FROM:&nbsp;220.184.16.*]<BR>发信人:&nbsp;owl2008&nbsp;(owl),&nbsp;信区:&nbsp;CPlusPlus<BR>标&nbsp;&nbsp;题:&nbsp;《<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>&nbsp;<B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black">primer</B>》读书<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>8<BR>发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Mon&nbsp;Jun&nbsp;28&nbsp;14:45:49&nbsp;2004),&nbsp;站内<BR><BR><B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>范围：2.5节<BR>&nbsp;&nbsp;<BR>随着这本书的深入，越来越发现自己对<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>的理解是多么的浅薄，现在的我对于这些<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>真是诚惶诚恐，要知道这些自以为是的理解也许在今后的某个日子里信手翻阅，恐怕自己都会问。这些废话是那个笨蛋写的？简直一无是处，但是，我们的成熟正是来自这些一无是处的错误，作为初学者的我，希望在这里留下学习的思维旅程，不管自己的水平如何。这本<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>我还是会坚持，<BR>之所以说上面那些感言，是因为自己觉得到了本节，作者将带领我们超越我们还有待深入理解的oo，关于泛型的讨论在各个技术社区随处可见，对于初学者来说，很少能看得懂这是在说什么？这无疑是个神秘的，令人恐惧的领域。然而，正如上节一样。跟着作者的思路我们不难理解泛型设计给程序员带来的好处，在读完作者行云流水般的讲述之后，回过头来看看自己真的理解了那些东西？结果是令人遗憾的，在读到第六章之前，我对这块总是疑问不断，主要如下：<BR>什么是泛型？只是模板吗？至少在本节范围内看来几乎是这么回事，为了提高代码的通用性，将数据类型参数化，让该代码的用户（本身也是编程者）决定类实例的数据类型，就这么简单？就从模板设计后对编译速度的影响，我们就可以肯定显然不是这么简单，以我们现在的水平无法真正回答这个问题，但是我们必须清楚的是：泛型设计不等于模板设计和简单的实例化类和函数。而模板一定是泛型设计的基础。<BR>我的第二个问题是。泛型设计是完全一种高于oop的设计思想吗？我的感觉好像不是，从过程到基于对象到面向对象的努力方向几乎都是数据处理的相对独立性，考虑的是数据的相对安全，而我所理解的泛型设计（主要是模板的用法），几乎只是为了代码的通用性，当然更大可能是我对泛型的理解本身是个错误，可见在第一个问题没解决之前。这个问题无从谈起，但是对于这节内容来说，带着几个笨问题离开，总比自以为是的态度更有价值。<BR>当然，对于本节的内容，上面的那些牛角尖的事情不是完全必要做的。我们要掌握的是模板最基本的用法，以及模板在实例化过程中的一些编译期的特点，总结要点如下。<BR>1.&nbsp;&nbsp;&nbsp;&nbsp;模板是对数据类型的参数化，说得非专业点，就是拿数据类型作“变量”，只不过在使用时，这些“变量”的值是类型而不是数据。比如：<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tenplate&lt;class&nbsp;xxx&gt;&nbsp;class&nbsp;A&nbsp;{…….};<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;main()&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A&lt;int&gt;&nbsp;&nbsp;obj;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return&nbsp;1&nbsp;;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的xxx就是我所谓的“变量”，理论上可以是你喜欢的任何标识符（当然它得符合标识符的基本要求）。<BR>2.&nbsp;&nbsp;&nbsp;&nbsp;模板实例化的过程书中讲的非常详细，我唯一能说的是，要仔细看，特别是对p42的内容（以第三版中文版为准）。<BR>3.&nbsp;&nbsp;&nbsp;&nbsp;对于oo的模板支持，在理解前面的内容的基础上，这几乎没什么难度，值得看看的是作者的代码。恐怕在国内教材里没有什么地方能找到如此优雅，聪明的代码了。这本书中代码哪怕只是抄一遍，也是好处不可估量的。呵呵。<BR><BR>--<BR>ID&nbsp;owl<BR>MSN:lingjiexyz@hotmail.com<BR>QQ:85475939<BR>BLOG：http://owl2008.blogone.net/<BR><BR>※&nbsp;来源:・BBS&nbsp;水木清华站&nbsp;http://smth.org・[FROM:&nbsp;220.184.16.*]<BR>发信人:&nbsp;owl2008&nbsp;(owl),&nbsp;信区:&nbsp;CPlusPlus<BR>标&nbsp;&nbsp;题:&nbsp;《<B 
      style="BACKGROUND-COLOR: #ffff66; COLOR: black">c++</B>&nbsp;<B 
      style="BACKGROUND-COLOR: #a0ffff; COLOR: black">primer</B>》读书<B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>9<BR>发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Mon&nbsp;Jun&nbsp;28&nbsp;14:51:19&nbsp;2004),&nbsp;站内<BR><BR><B 
      style="BACKGROUND-COLOR: #99ff99; COLOR: black">笔记</B>范围：2.6节<BR><BR>每个程序员都知道，在程序运行过程中，一些情况是不可预料的，无论程序的设计看起来是多么完善，在某个特定的环境里同样会出错，但是这样的错误往往会有些共同之处，比如new的时候也许会空间不足。显然这样的错误。不能完全说是程序设计的问题，但是如果你的程序能对这些情况做出反应，那么这样的程序实用性就会更强。异常机制正是为此而生。<BR>注意，这里用了“机制”这个词，也就意味者规则，正如本节开头所说的：对于异常各人都有自己的处理方式。比如就用if语句处理。本来这是没什么问题的，但是我们生活在一个不幸的时代，程序的规模大得远远超出了个人能力能够接受的程度。我们需要合作，因此统一的编码风格成了必要的事情了，这也是为什么程序员经常告诉初学者编程是最不具备个性化的东西之一的一个原因，<BR>使用异常机制还有一个好处。他可以大大减少代码的长度和规模。对于相同的异常情况可以集中统一处理。这样说很空泛，我们来举一个小例子.，假设我们写个函数分别为，int，&nbsp;char&nbsp;的指针分配相同单位的空间，如不要异常机制，这样写：<BR>bool&nbsp;new_space(&nbsp;int&nbsp;*&amp;pev,char&nbsp;*&amp;ch,int&nbsp;size&nbsp;)&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pev&nbsp;=&nbsp;new&nbsp;int[&nbsp;size&nbsp;];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ch&nbsp;=&nbsp;new&nbsp;char[&nbsp;size&nbsp;];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;!pev&nbsp;)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;!ch&nbsp;)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retuen&nbsp;false;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<BR>}<BR>这样的东西恐怕没人喜欢，因为如果我们这样调用他，new_space(&nbsp;p,&nbsp;c,&nbsp;6&nbsp;)，无论空间分配成功与否。调用者都不知道(&nbsp;问：你不会定义个bool量吗？？答：会。烦。我用别的&nbsp;)，恩，得让我们的东西人性化点。修改如下：<BR><BR>bool&nbsp;new_space(&nbsp;int&nbsp;*&amp;pev,char&nbsp;*&amp;ch,int&nbsp;size&nbsp;){<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pev&nbsp;=&nbsp;new&nbsp;int[&nbsp;size&nbsp;];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ch&nbsp;=&nbsp;new&nbsp;char[&nbsp;size&nbsp;];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;!pev&nbsp;)&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cerr&nbsp;&lt;&lt;&nbsp;"err1"&nbsp;&lt;&lt;endl;//在帮助系统里把err1说明成空间不足<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;!ch&nbsp;)&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cerr&nbsp;&lt;&lt;&nbsp;"err1"&nbsp;&lt;&lt;endl;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retuen&nbsp;false;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>return&nbsp;true;<BR>}<BR>呵呵，这下对得起可爱的用户了吧？可是发现有点对不起自己。cerr&nbsp;&lt;&lt;&nbsp;"err1"&nbsp;&lt;&lt;endl;&nbsp;&nbsp;retuen&nbsp;false;&nbsp;我写了两遍，这是两个指针，如果十个呢？天哪。老板，加工资吧(回答你们一定知道)，那好，试试异常机制，再改。<BR>bool&nbsp;new_space(&nbsp;int&nbsp;*&amp;pev,char&nbsp;*&amp;ch,int&nbsp;size&nbsp;){<BR>&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string&nbsp;word&nbsp;(&nbsp;"err1"&nbsp;);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pev&nbsp;=&nbsp;new&nbsp;int[&nbsp;size&nbsp;];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ch&nbsp;=&nbsp;new&nbsp;char[&nbsp;size&nbsp;];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;!pev&nbsp;)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;word;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&nbsp;!ch&nbsp;)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;word;<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;catch(&nbsp;string&nbsp;err&nbsp;)<BR>&nbsp;&nbsp;&nbsp;&nbsp;{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cerr&nbsp;&lt;&lt;&nbsp;err&nbsp;&lt;&lt;&nbsp;endl;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<BR>&nbsp;&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<BR>}<BR>呵呵，这下比较舒服了。大家可能看到上面那函数好像并没有减少什么长度，yes，但如果处理的参数不只两个，很多，你就会发现他省了你很多力气，<BR>&nbsp;&nbsp;&nbsp;上面主要想说明异常机制的好处和用法（水平有限，可能例子并不好）在本节中还有个重要的内容，那就是程序处理异常的方式和顺序。比如上面的程序，我们想让它在当分配成功时显示ok，那么cout&nbsp;&lt;&lt;&nbsp;&nbsp;“ok”&nbsp;&nbsp;&lt;&lt;&nbsp;endl;写在那儿呢？如果我们的try抛出的异常在函数里没有相应的catch怎么办呢？这些书上都说很详细。仔细看吧，一定收获不少。<BR><BR>--<BR>ID&nbsp;owl<BR>MSN:lingjiexyz@hotmail.com<BR>QQ:85475939<BR>BLOG：http://owl2008.blogone.net/<BR><BR>※&nbsp;来源:・BBS&nbsp;水木清华站&nbsp;http://smth.org・[FROM:&nbsp;220.184.16.*]<BR></TD></TR></TBODY></TABLE>
<HR class=default>
[<A href="http://www.smth.edu.cn/bbssec.php">分类讨论区</A>] [<A 
href="http://www.smth.edu.cn/bbsdoc.php?board=CPlusPlus">返回版面</A>] [<A 
href="http://www.smth.edu.cn/bbsgdoc.php?board=CPlusPlus&amp;page=17">返回文摘区</A>] 
[<A href="javascript:history.go(-1)">快速返回</A>] </DIV></BODY></HTML>
