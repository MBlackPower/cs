


USE_FASTDB_NAMESPACE
class __SESSION_USER
{
public:
	char const * user_session_id_;
	char const * user_name_;
	char const * user_password_;
	char const * channel_;
	int			 login_status_;
	
	TYPE_DESCRIPTOR((
		KEY(user_session_id_, INDEXED|HASHED),/*内存数据库字段描述*/
		FIELD(user_name_),
		FIELD(user_password_),
		FIELD(channel_),
		FIELD(login_status_)
		));
};
REGISTER(__SESSION_USER);/*C++类与内存数据库表的映射*/



	char bufft[1024] = {0};
	unsigned long iy = (unsigned long)bufft;
	printf("%x", iy);
	
	char * p = (char *)iy;

#if 0
	std::multimap<int, char> ctr;
	ctr.insert(std::pair<int, char>(1, 'a'));
	ctr.insert(std::pair<int, char>(2, 'b'));
	ctr.insert(std::pair<int, char>(1, 'c'));
	ctr.insert(std::pair<int, char>(1, 'd'));
	ctr.insert(std::pair<int, char>(1, 'c'));
	
	int i = ctr.count(1);
#endif//0
	
	return 0;


class CSessionUser
{
public:
	CSessionUser()
	{
		
	}
	~CSessionUser()
	{
		
	}
	
	CSessionUser& operator = (const CSessionUser &a)
	{
		strcpy(user_session_id_, a.user_session_id_);
		strcpy(user_name_,		 a.user_name_);
		strcpy(user_password_,	 a.user_password_);
		
		channel_		= a.channel_;
		login_status_	= a.login_status_;
		
		return *this;
	}
	CSessionUser& operator = (const __SESSION_USER &a)
	{
		strcpy(user_session_id_, a.user_session_id_);
		strcpy(user_name_,		 a.user_name_);
		strcpy(user_password_,	 a.user_password_);
		
		channel_		= a.channel_;
		login_status_	= a.login_status_;
		
		return *this;
	}
	CSessionUser& operator = (/*const */dbCursor<__SESSION_USER> &a)
	{
		strcpy(user_session_id_, (char *)(a->user_session_id_));
		strcpy(user_name_,		 (char *)(a->user_name_));
		strcpy(user_password_,	 (char *)(a->user_password_));
		
		channel_		= a->channel_;
		login_status_	= a->login_status_;
		
		return *this;
	}

	void copy(__SESSION_USER &t)
	{
		t.user_session_id_	= user_session_id_;
		t.user_name_		= user_name_;
		t.user_password_	= user_password_;
		
		t.channel_			= channel_;
		t.login_status_		= login_status_;
	}
	void copy(dbCursor<__SESSION_USER> &t)
	{
		t->user_session_id_	= user_session_id_;
		t->user_name_		= user_name_;
		t->user_password_	= user_password_;
		
		t->channel_			= channel_;
		t->login_status_	= login_status_;
	}
	void out(void)
	{
		printf("--\n");
		printf(
			"user:%s\n"
			"pwd:%s\n"
			"id:%s\n"
			"session:%p\n"
			"status:%d\n",
			user_name_,
			user_password_,
			user_session_id_,
			channel_,
			login_status_);
		printf("--\n");
	}
public:
	char user_session_id_[256];
	char user_name_[128];
	char user_password_[128];
	const char * channel_;
	int	 login_status_;
};



void LOG(std::vector<CSessionUser> &uo_vec, const char * info)
{
	printf("====================[%s begin]====================\n", info);
	for (int i = 0; i < uo_vec.size(); i++)
		uo_vec[i].out();
	printf("====================[%s   end]====================\n\n", info);
}

#include <map>


template<typename _I1, typename _I2, typename _T>
class CMultiKeyTree
{
public:
	CMultiKeyTree()
	{
		m_map1.clear();
		m_map2.clear();
	}
	~CMultiKeyTree()
	{
		m_map1.clear();
		m_map2.clear();
	}
	void insert(_I1 i1, _I2 i2, _T t)
	{
		std::map<_I1, _I2>::iterator itr1 = m_map1.find(i1);
		std::map<_I2, _T>::iterator itr2 = m_map2.find(i2);

		if (itr1 != m_map1.end()) {
			itr1->second = i2;
		} else {
			m_map1.insert(std::make_pair(i1, i2));
		}
		if (itr2 != m_map2.end()) {
			itr2->second = t;
		} else {
			m_map1.insert(std::make_pair(i2, t));
		}
	}

	bool find(_I1 i1, _T &t)
	{
		std::map<_I1, _I2>::const_iterator itr1 = m_map1.find(i1);
		if (itr1 != m_map1.end()) {
			std::map<_I2, _T>::const_iterator itr2 = m_map2.find(itr1->second);
			if (itr2 != m_map2.end()) {
				t = itr2->second;
				return true;
			}
		}
		return false;
	}
	bool find(_I2 i2, _T &t)
	{
		std::map<_I2, _T>::const_iterator itr2 = m_map2.find(i2);
		if (itr2 != m_map2.end()) {
			t = itr2->second;
			return true;
		}
		return false;
	}

	bool update(_I1 i1, _T &t)
	{
		std::map<_I1, _I2>::const_iterator itr1 = m_map1.find(i1);
		if (itr1 != m_map1.end()) {
			std::map<_I2, _T>::iterator itr2 = m_map2.find(itr1->second);
			if (itr2 != m_map2.end()) {
				itr2->second = t;
				return true;
			}
		}
		return false;
	}
	bool update(_I2 i2, _T &t)
	{
		std::map<_I2, _T>::iterator itr2 = m_map2.find(i2);
		if (itr2 != m_map2.end()) {
			itr2->second = t;
			return true;
		}
		return false;
	}

	bool remove(_I1 i1, _T &t)
	{
		std::map<_I1, _I2>::iterator itr1 = m_map1.find(i1);
		if (itr1 != m_map1.end()) {
			std::map<_I2, _T>::iterator itr2 = m_map2.find(itr1->second);
			if (itr2 != m_map2.end()) {
				m_map2.erase(itr2);
			}
			m_map1.erase(itr1);
			return true;
		}
		return false;
	}

protected:
	std::map<_I1, _I2> m_map1;
	std::map<_I2, _T> m_map2;
};

