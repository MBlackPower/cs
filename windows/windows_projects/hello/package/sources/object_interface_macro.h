#pragma once




#include <malloc.h>
#include <stdio.h>



/******************************************************************************************/
// new函数的定义
/******************************************************************************************/

#define _NEW_(class_name)								\
class_name * NEW_##class_name() {						\
    class_name * obj = NULL;							\
	obj = (class_name *)malloc( sizeof(class_name) );	\
    if( !obj )											\
        obj = NULL;									    \
	else												\
		CTOR_##class_name(obj);							\
    return obj;											\
}

/******************************************************************************************/
// delete函数的定义
/******************************************************************************************/

#define _DELETE_(class_name)							\
void DELETE_##class_name(class_name * obj) {			\
	DTOR_##class_name( obj );							\
	if ( obj ) {										\
		free(obj);										\
		obj = NULL;									    \
	}													\
}


/******************************************************************************************/
// 构造函数的定义
/******************************************************************************************/
#define _CTOR_(class_name)	_NEW_(class_name)			\
void CTOR_##class_name(class_name * obj){               \
obj->status_ = _instance;


/******************************************************************************************/
// 绑定类与函数指针
/******************************************************************************************/
#define _BIND_FUNC_(func_, func) obj->func_ = &(func);

#define _END_CTOR_	}


/******************************************************************************************/
// 析构函数的定义
/******************************************************************************************/
#define _DTOR_(class_name) _DELETE_(class_name)			\
void DTOR_##class_name(class_name * obj){               \
obj->status_ = _callback;

#define _END_DTOR_	}



/******************************************************************************************/
// 继承
/******************************************************************************************/
#define _SUPER_PTR_(cthis, father) ((father*)(&(obj->##father)))

#define _SUPER_CTOR_(father) CTOR_##father(_SUPER_PTR_(obj, father));