#pragma once

#include "compiler_option.h"




/******************************************************************************************/
//定义公共枚举
//枚举值的命名规则 ->“_”为开头， + 单词小写 + 分隔“_”
//枚举类型定义规则 ->“_”为开头， + 单词大写 + 分隔“_”
/******************************************************************************************/

// 函数执行时状态是否正确
typedef enum
{
	_false	= 0x00000000,
	_true	= 0x00000001
}
_BOOLEAN;


typedef enum
{
	_initialize = 0x00001000,
	_create,
	_destroy,
	_thread_status_start
}
_STATUS;



// 函数执行时的错误号
typedef enum
{
	_ok		= 0x00000000,
	_failed	= 0x00000001,
	_err_unknown,//未知错误
	_err_parameter,//输入函数的参数错误
	_err_exist,
	_err_create,//没有实例化
	_err_synch_start
}
_ERROR;

// 数据类型
typedef enum
{
	_data_type	= 0x00100000
}
_DATA_TYPE;











/******************************************************************************************/
//定义宏变量
//命名规则 -> "_" + 单词大写,“_”分隔，以“_”最为结束符
/******************************************************************************************/

// 是否成功
#define _IS_TRUE_( _boolean )					_true == (_boolean)

// 是否失败
#define _IS_FALSE_( _boolean )				    _false == (_boolean)

// 是否已经实例化
#define _IS_INITIALIZE_( _status )				_initialize == (_status)

// 是否已经实例化
#define _IS_CREATE_( _status )					_create == (_status)







/******************************************************************************************/
//空的宏命名规则 -> "_" + 单词小写,“_”分隔，以“_”最为结束符
/******************************************************************************************/

//函数参数的
#define _in_
#define _out_







































/******************************************************************************************/
// 重定义数据类型
// 数据类型均为小写
/******************************************************************************************/
typedef unsigned char	u_char;
typedef unsigned long	u_long;
typedef unsigned short	u_short;
//typedef uchar			boolean;




/******************************************************************************************/
//定义公共复合数据类型
//复合数据类型命名规则 -> 单词大写 + “_”分隔
//成员变量命名规则     -> 单词小 + “_”分隔，以“_”结尾
/******************************************************************************************/












/******************************************************************************************/
//定义函数
//函数命名 --> 单词小写，“_”分隔
//函数参数 --> 使用_in_ / _out_表示参数走向
//函数返回 --> 使用RESULT类型表示返回状态
/******************************************************************************************/

extern int __cdecl get_error( void );
