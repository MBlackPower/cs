//*****************************File Header******************************
//	KillSelf.cpp
//
//	Histroy:
// V 1.0		2001-08-19	Diddy		Initialize
// V 1.1		2002-12-02	Diddy		Open source!
//*******************************E N D*********************************

#include "stdafx.h"
#include <conio.h>

int main(int argc, char* argv[])
{
	// if this is a colne,it's arugment's count must is 3!
	// so if argc not equal to 3,that means this is a not clone runnin,yet!
	if( argc != 3 )
	{
		char						CLONE_FILE[MAX_PATH];
		DWORD						pID;
		char						*lpBuff;
		int							nBuff=MAX_PATH;
		STARTUPINFO					si;
		PROCESS_INFORMATION			pi;
		char						*lpCommLines;

		// * here are 3 step need to plane *
		// first,get process's executable filename with full path
		pID = GetCurrentProcessId();
		
		if(pID==NULL)	return -1;

		lpBuff=new char[nBuff];
		GetTempPath(nBuff,lpBuff);
		GetTempFileName(lpBuff,"Clone",0,CLONE_FILE);

		sprintf(CLONE_FILE,"%s","C:\\Clone.EXe");
		
		// second,copy process's executable filename to a temporal file
		if(CopyFile(argv[0],CLONE_FILE,FALSE)==0)
			printf("copy error...%d\n",GetLastError());

		// third,write temporal file flag,and run temporal with process mode
		CreateFile(CLONE_FILE,
				GENERIC_READ,
				FILE_SHARE_DELETE|FILE_SHARE_READ, // FILE_SHARE_DELETE <-- important
				(LPSECURITY_ATTRIBUTES)NULL,
				OPEN_EXISTING,
				FILE_FLAG_DELETE_ON_CLOSE,
				(HANDLE)NULL);

		lpCommLines = new char[MAX_PATH];
		memset(lpCommLines,0,MAX_PATH);

		// notice command line format
		sprintf(lpCommLines,"%s \"%s\" %d",CLONE_FILE,argv[0],pID);

		memset(&si,0,sizeof(STARTUPINFO));
		si.cb = sizeof(STARTUPINFO);

		if(CreateProcess(NULL,lpCommLines,NULL,NULL,TRUE,0,NULL,NULL,&si,&pi)==0)
			printf("error %d.\n",GetLastError());
		
		// delay,waiting for new process!
		Sleep(400);

		delete lpCommLines;
		delete lpBuff;
	}
	else
	{
		HANDLE						hOrgProc;
		DWORD						pID;

		// debug infor
		//printf("Process ID:%s\nOld file name:%s",argv[2],argv[1]);

		// open process handle and waiting for it close automatical
		pID = (DWORD)_atoi64(argv[2]);
		hOrgProc = OpenProcess(PROCESS_ALL_ACCESS,TRUE,pID);
		WaitForSingleObject(hOrgProc,INFINITE);
		CloseHandle(hOrgProc);

		// delete org file!
		DeleteFile(argv[1]);

		// 
		printf("\npress any key to continue...\n");
		getch();
		// when clone process waiting finished,it will be delete by OS!
	}
	return 0;
}
