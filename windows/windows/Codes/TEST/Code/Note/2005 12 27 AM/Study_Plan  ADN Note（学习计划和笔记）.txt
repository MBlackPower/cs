学习进程--列举进程


介绍系统如何管理所有正在运行的应用程序


什么是进程
	进程通常被定义为一个正在运行的程序的实例

	它由两个部分组成
	
		 一个是操作系统用来管理进程的内核对象。

		 另一个是地址空间-----它包含所有可执行模块或D L L模块的代码和数据。它还包含动态内
				      存分配的空间。如线程堆栈和堆分配空间。

进程必须拥有一个在它的环境中运行的线程，该线程负责执行包含在进程的地址空间中的代码。

单个进程可能包含若干个线程，所有这些线程都“同时”执行进程地址空间中的代码。
为此，每个线程都有它自己的一组CPU寄存器和它自己的堆栈。

当创建一个进程时，系统会自动创建它的第一个线程，称为主线程

操作系统实际上并不调用你编写的进入点函数。它调用的是C / C + +运行期启动函数。该函
数负责对C / C + +运行期库进行初始化，这样，就可以调用m a l l o c和f r e e之类的函数。它还能够确
保已经声明的任何全局对象和静态C + +对象能够在代码执行以前正确地创建。

WinMain的hinstExe参数的实际值是系统将可执行文件的映象加载到进程的地址空间时使用的基本地址空间。

可执行文件的映像加载到的基地址是由链接程序决定的。Visual C++链接程序使用的默认基地址
是0x00400000，因为这是在运行Windows 98时可执行文件的映象可以加载到的最低地址。

GetModuleHandle函数返回可执行文件或DLL文件加载到进程的地址空间时所用的句柄/基地址：
	传递一个以0结尾的字符串，用于设定加载到调用进程的地址空间的可执行文件或DLL 文件的名字。
	如果系统找到了指定的可执行文件或DLL 文件名，GetModuleHandle便返回该可执行文件或D L L文件
	映象加载到的基地址。
	如果系统没有找到该文件，则返回N U L L。
	也可以调用GetModuleHandle，为pszModule参数传递NULL，返回调用的可执行文件的基地址。




当一个线程调用C r e a t e P r o c e s s时，系统就会创建一个进程内核对象，

。然后，系统为新进程创建一个虚拟地址空间，并将可执行文件或任何必要的D L L文件的代码和数据加载到该进程的地址空
间中。

，系统为新进程的主线程创建一个线程内核对象（其使用计数为1）

如果系统成功地创建了新进程和主线程，CreateProcess便返回T R U E。
注意在进程被完全初始化之前，CreateProcess返回T R U E。

系统如何创建进程内核对象，以便管理每个进程


如何使用相关的内核对象来对进程进行操作。


