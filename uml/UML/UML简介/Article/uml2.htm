<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=gb_2312-80">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>标准建模语言UML及其支持环境(二)</title>
</head>

<body bgcolor="#D2D2D2">

<p align="center"><font color="#FF0000" size="4">标准建模语言UML及其支持环境(二)</font></p>

<p align="center">北京航空航天大学软件工程研究所<br>
</p>

<p align="left">(接上期)<br>
4. 标准建模语言UML的应用领域</p>

<p align="left"><br>
UML的目标是以面向对象图的方式来描述任何类型的系统,具有很宽的应用领域。其中最常用的是建立软件系统的模型,但它同样可以用于描述非软件领域的系统,如机械系统、企业机构或业务过程,以及处理复杂数据的信息系统、具有实时要求的工业系统或工业过程等。总之,UML是一个通用的标准建模语言,可以对任何具有静态结构和动态行为的系统进行建模。此外,UML适用于系统开发过程中从需求规格描述到系统完成后测<br>
试的不同阶段。在需求分析阶段,可以用用例来捕获用户需求。通过用例建模,描述对系统感兴趣的外部角色及其对系统(用例)的功能要求。分析阶段主要关心问题域中的主要概念(如抽象、类和对象等)和机制,需要识别这些类以及它们相互间的关系,并用UML类图来描述。为实现用例,类之间需要协作,这可以用UML动态模型来描述。在分析阶段,只对问题域的对象(现实世界的概念)建模,而不考虑定义软件系统中技术细节的类(如处理用户接口、数据库、通讯和并行性等问题的类)。这些技术细节将在设计阶段引入,因此设计阶段为构造阶段提供更详细的规格说明。</p>

<p align="left"><br>
编程(构造)是一个独立的阶段,其任务是用面向对象编程语言将来自设计阶段的类转换成实际的代码。在用UML建立分析和设计模型时,应尽量避免考虑把模型转换成某种特定的编程语言。因为在早期阶段,模型仅仅是理解和分析系统结构的工具,过早考虑编码问题十分不利于建立简单正确的模型。</p>

<p align="left"><br>
UML模型还可作为测试阶段的依据。系统通常需要经过单元测试、集成测试、系统测试和验收测试。不同的测试小组使用不同的UML图作为测试依据:单元测试使用类图和类规格说明;集成测试使用部件图和合作图;系统测试使用用例图来验证系统的行为;验收测试由用户进行,以验证系统测试的结果是否满足在分析阶段确定的需求。</p>

<p align="left"><br>
总之,标准建模语言UML适用于以面向对象技术来描述任何类型的系统,而且适用于系统开发的不同阶段,从需求规格描述直至系统完成后的测试和维护。</p>

<p align="left"><br>
二、标准建模语言UML的静态建模机制<br>
</p>

<p align="left">任何建模语言都以静态建模机制为基础,标准建模语言UML也不例外。UML的静态建模机制包括用例图(Use
case diagram)、类图(Class diagram)、对象图(Object diagram
)、包(Package)、构件图(Component diagram)和配置图(Deployment
diagram)。</p>

<p align="left"><br>
1. 用例图<br>
</p>

<p align="left">(1) 用例模型(Use case model)<br>
长期以来,在面向对象开发和传统的软件开发中,人们根据典型的使用情景来了解需求。但是,这些使用情景是非正式的,虽然经常使用,却难以建立正式文挡。用例模型由Ivar
Jacobson在开发AXE系统中首先使用,并加入由他所倡导的OOSE和Objectory方法中。用例方法引起了面向对象领域的极大关注。自1994年Ivar
Jacobson的著作出版后,面向对象领域已广泛接纳了用例这一概念,并认为它是第二代面向对象技术的标志。<br>
用例模型描述的是外部执行者(Actor)所理解的系统功能。用例模型用于需求分析阶段,它的建立是系统开发者和用户反复讨论的结果,表明了开发者和用户对需求规格达成的共识。首先,它描述了待开发系统的功能需求;其次,它将系统看作黑盒,从外部执行者的角度来理解系统;第三,它驱动了需求分析之后各阶段的开发工作,不仅在开发过程中保证了系统所有功能的实现,而且被用于验证和检测所开发的系统,从而影响到开发工作的各个阶段和
UML 的各个模型。在UML中,一个用例模型由若干个用例图描述,用例图主要元素是用例和执行者。</p>

<p align="left"><br>
(2) 用例(use case)<br>
从本质上讲,一个用例是用户与计算机之间的一次典型交互作用。以字处理软件为例,&quot;将某些正文置为黑体&quot;和&quot;创建一个索引&quot;便是两个典型的用例。在UML中,用例被定义成系统执行的一系列动作,动作执行的结果能被指定执行者察觉到。</p>

<p align="center"><img src="../images/uml2-1.jpg" width="472"
height="307"></p>

<p align="center">图1 用例图</p>

<p align="left">在UML中,用例表示为一个椭圆。图1显示了一个金融贸易系统的用例图。其中,&quot;风险分析&quot;,&quot;交易估价&quot;,&quot;进行交易&quot;,&quot;设置边界&quot;,&quot;超越边界的交易&quot;,&quot;评价贸易&quot;,&quot;更新帐目&quot;等都是用例的实例。概括地说,用例有以下特点:<br>
&middot;用例捕获某些用户可见的需求,实现一个具体的用户目标。<br>
&middot;用例由执行者激活,并提供确切的值给执行者。<br>
&middot;用例可大可小,但它必须是对一个具体的用户目标实现的完整描述。<br>
</p>

<p align="left">(3) 执行者(Actor)<br>
执行者是指用户在系统中所扮演的角色。其图形化的表示是一个小人。图1中有四个执行者:贸易经理、营销人员、售货员和记帐系统。在某些组织中很可能有许多营销人员,但就该系统而言,他们均起着同一种作用,扮演着相同的角色,所以用一个执行者表示。一个用户也可以扮演多种角色(执行者)。例如,一个高级营销人员既可以是贸易经理,也可以是普通的营销人员;一个营销人员也可以是售货员。在处理执行者时,应考虑其作用,而不是人或工作名称,这一点是很重要的。</p>

<p align="left"><br>
图1中,不带箭头的线段将执行者与用例连接到一起,表示两者之间交换信息,称之为通信联系。执行者触发用例,并与用例进行信息交换。单个执行者可与多个用例联系;反过来,一个用例可与多个执行者联系。对同一个用例而言,不同执行者有着不同的作用:他们可以从用例中取值,也可以参与到用例中。</p>

<p align="left">需要注意的是执行者在用例图中是用类似人的图形来表示,尽管执行的,但执行者未必是人。例如,执行者也可以是一个外界系统,该外界系统可能需要从当前系统中获取信息,与当前系统有进行交互。在图1中,我们可以看到,记帐系统是一个外界系统,它需要更新帐目。</p>

<p align="left"><br>
通过实践,我们发现执行者对提供用例是非常有用的。面对一个大系统,要列出用例清单常常是十分困难。这时可先列出执行者清单,再对每个执行者列出它的用例,问题就会变得容易很多。<br>
</p>

<p align="left">(4) 使用和扩展(Use and Extend)<br>
图1中除了包含执行者与用例之间的连接外,还有另外两种类型的连接,用以表示用例之间的使用和扩展关系。使用和扩展是两种不同形式的继承关系。当一个用例与另一个用例相似,但所做的动作多一些,就可以用到扩展关系。例如图1中,基本的用例是&quot;进行交易&quot;。
交易中可能一切都进行得很顺利,但也可能存在扰乱顺利进行交易的因素。其中之一便是超出某些边界值的情况。例如,贸易组织会对某个特定客户规定最大贸易量,这时不能执行给定用例提供的常规动作,而要做些改动。我们可在&quot;进行交易&quot;用例中做改动。但是,这将把该用例与一大堆特殊的判断和逻辑混杂在一起,使正常的流程晦涩不堪。图1中将常规的动作放在&quot;进行交易&quot;用例中,而将非常规的动作放置于&quot;超越边界的交易&quot;
用例中,这便是扩展关系的实质。当有一大块相似的动作存在于几个用例,又不想重复描述该动作时,就可以用到使用关系。例如,现实中风险分析和交易估价都需要评价贸易,为此可单独定义一个用例,即&quot;评价贸易&quot;,而&quot;风险分析&quot;和&quot;交易估价&quot;用例将使用它。<br>
请注意扩展与使用之间的相似点和不同点。它们两个都意味着从几个用例中抽取那些公共的行为并放入一个单独用例中,而这个用例被其他几个用例使用或扩展。但使用和扩展的目的是不同的。<br>
</p>

<p align="left">(5) 用例模型的获取<br>
几乎在任何情况下都会使用用例。用例用来获取需求,规划和控制项目。用例的获取是需求分析阶段的主要任务之一,而且是首先要做的工作。大部分用例将在项目的需求分析阶段产生,并且随着工作的深入会发现更多的用例,这些都应及时增添到已有的用例集中。用例集中的每个用例都是一个潜在的需求。<br>
</p>

<p align="left">a. 获取执行者<br>
获取用例首先要找出系统的执行者。可以通过用户回答一些问题的答案来识别执行者。以下问题可供参考:<br>
&middot;谁使用系统的主要功能(主要使用者)。<br>
&middot;谁需要系统支持他们的日常工作。<br>
&middot;谁来维护、管理使系统正常工作(辅助使用者)。<br>
&middot;系统需要操纵哪些硬件。<br>
&middot;系统需要与哪些其它系统交互,包含其它计算机系统和其它应用程序。<br>
&middot;对系统产生的结果感兴趣的人或事物。</p>

<p align="left"><br>
b. 获取用例<br>
一旦获取了执行者,就可以对每个执行者提出问题以获取用例。<br>
以下问题可供参考:<br>
&middot;执行者要求系统提供哪些功能(执行者需要做什么)?<br>
&middot;执行者需要读、产生、删除、修改或存储的信息有哪些类型。<br>
&middot;必须提醒执行者的系统事件有哪些?或者执行者必须提醒系统的事件有哪些?怎样把这些事件表示成用例中的功能?<br>
&middot;为了完整地描述用例,还需要知道执行者的某些典型功能能否被系统自动实现?<br>
还有一些不针对具体执行者问题(即针对整个系统的问题):<br>
&middot;系统需要何种输入输出?输入从何处来?输出到何处?<br>
&middot;当前运行系统(也许是一些手工操作而不是计算机系统)的主要问题?<br>
需要注意,最后两个问题并不是指没有执行者也可以有用例,只是获取用例时尚不知道执行者是什么。一个用例必须至少与一个执行者关联。还需要注意:不同的设计者对用例的利用程度也不同。例如,Ivar
Jacobson说,对一个十人年的项目,他需要二十个用例。而在一个相同规模的项目中,Martin
Fowler则用了一百多个用例。我们认为:任何合适的用例都可使用,确定用例的过程是对获取的用例进行提炼和归纳的过程,对一个十人年的项目来说,二十个用例似乎太少,一百多个用例则嫌太多,需要保持二者间的相对均衡。(未完待续)</p>

<p align="center"><a href="../index.htm">Home</a></p>
</body>
</html>
