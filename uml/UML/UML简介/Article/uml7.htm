<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=gb_2312-80">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>标准建模语言UML及其支持环境(七)</title>
</head>

<body bgcolor="#D2D2D2">

<p align="center"><font color="#FF0000" size="4">标准建模语言UML及其支持环境(七)<br>
</font></p>

<p align="center">北京航空航天大学软件工程研究所</p>

<p>前几期的主要内容包括:<br>
一、标准建模语言UML概述<br>
二、标准建模语言UML的静态建模机制<br>
三、标准建模语言UML的动态建模机制<br>
四、标准建模语言UML支持环境<br>
五、标准建模语言UML的应用实例<br>
1. UML建模过程高层视图<br>
2. UML实际建模过程<br>
(1) 需求<br>
(2) 分析</p>

<p><br>
(接上期)<br>
(3) 设计<br>
设计阶段的任务是通过综合考虑所有的技术限制,以扩展和细化分析阶段的模型。设计的目的是指明一种易转化成代码的工作方案,是对分析工作的细化,即进一步细化分析阶段所提取的类(包括其操作和属性),并且增加新类以处理诸如数据库、用户接口、通信、设备等技术领域的问题。<br>
设计阶段可以分为两个部分:结构设计是高层设计,其任务是定义包(子系统),包括包间的依赖性和主要通信机制。我们希望得到尽可能简单和清晰的结构,各部分之间的依赖尽可能的少,并尽可能的减少双向的依赖关系。<br>
第二部分是详细设计,细化包的内容,使编程人员得到所有类的一个足够清晰的描述。同时使用UML中的动态模型,描述特定情况下这些类的实例之间的行为。<br>
<strong>&middot; 结构设计<br>
</strong>一个设计良好的系统结构是系统可扩充和可变更的基础。包实际上是一些类的集合。类图中包括有助于用户从技术逻辑中分离出应用逻辑(领域类),从而减少它们之间的依赖性。这就是软件结构设计强调的模块间的高聚合、低偶合的原则。在商业MIS中,存在以下包(或子系统):<br>
用户接口包:用户接口类允许用户访问系统数据和加入新数据。在商业对象中,用户接口包跟商业对象包合作,调用商业对象的操作,实施数据的检索和插入。<br>
商业对象包:包括来自分析阶段的特定领域类。在设计阶段,详细设计这些类,以完整定义他们的操作,支持对数据库的存取。所以,所有商业对象类必须继承数据库包中的类。<br>
数据库包:为商业对象包中的类提供服务,便于永久存储。<br>
实用包:包含系统其他包要使用的服务。它们之间的内在关系如图1所示。</p>

<p align="center"><img src="../images/uml7-1.jpg" width="315"
height="215"></p>

<p><strong>&middot; 详细设计<br>
</strong>详细设计的目的是通过创建新的类图、状态图和动态图,描述新的技术类,并扩展和细化分析阶段&quot;素描&quot;的商业对象类。这些图在分析阶段也曾用过,不过在详细设计阶段,它们是从技术层次上对系统进行更详尽的描述。如分析阶段的用例描述用来验证它们是否在设计阶段都得到处理,而顺序图用来展示系统中每个用例在技术上如何实现,等等。<br>
数据库包:MIS的实现必须有永久存储对象即数据库的支持,因此系统中必须增加数据库层,提供这种服务。目前,市面上有许多商用数据库,有的是真正的面向对象数据库如工程数据库,有的是传统的关系数据库。由于我们只讨论设计方法,不涉及具体的环境,因此,可以抽象一个永久存储类来实现对数据库的通用操作,如存储、更新、删除、查询等。永久类类似于MFC中的基类。<br>
商业对象包:设计阶段的商业对象包即是分析阶段的领域类,需要从实现角度对这些类进行细化,包括如何实现他们之间的关联和行为。所有这些对象类必须从数据库包的永久类中继承而来。分析阶段描述的类的操作,在设计模型中可能被分解成几个操作或者改变名称。因为分析是构造每个类的框架,而设计是对系统的详细说明,因此设计模型中所有类的操作必须定义符号和返回值。图2是经过细化后的商业类图(局部)</p>

<p align="center"><img src="../images/uml7-2.jpg" width="319"
height="329"></p>

<p>在设计阶段,也可细化分析阶段的状态图,更详细的显示状态的变换细节(如图3)。使用状态图可以揭示单个对象在整个系统中的变化细节,对了解和实现关键类有较大的帮助。<br>
此外,还可以使用其他图在实现层上从不同侧面对分析阶段建立的模型进行细化。<br>
用户接口包:用户接口包在其他包的&quot;顶层&quot;。在系统中,它为用户提供信息和支持。由于所有与用户的交互都是通过用户接口实现的,因此UML的动态模型非常适合对GUI包的描述。图4用顺序图描述系统增加新商品用例的动态模型。另一种表示顺序的图是合作图(如图5)。</p>

<p align="center"><img src="../images/uml7-3.jpg" width="317"
height="298"></p>

<p align="center"><img src="../images/uml7-4.jpg" width="478"
height="283"></p>

<p align="center"><img src="../images/uml7-5.jpg" width="335"
height="245"></p>

<p>建立用户接口是设计阶段的一项特殊活动。在商业MIS中,用户接口可以分为功能(系统中的主功能窗口,如采购、库存、销售、统计分析等)、信息(显示系统信息的窗口以及(维护系统的窗口)等三部分。<br>
目前,由于可视化技术的迅速发展,用户界面的设计相对比较简单。一般情况下,应用系统的用户界面由带有菜单条和相应图形的主窗口组成。<br>
(4) 实现<br>
构造或实现阶段是对类进行编程的过程。可以选择某种面向对象对象编程语言(如Java)作为实现系统的软件环境。Java很容易实现从逻辑视图到代码部件的映射,因为类到Java代码文件之间是一一映射关系。图6是设计模型的部件图,显示逻辑视图到部件视图的一个简单映射。逻辑视图中的包也映射到相应的部件视图中。</p>

<p align="center"><img src="../images/uml7-6.jpg" width="441"
height="334"></p>

<p>在实现阶段中,可以选取下列图的说明来辅助编程:<br>
&middot; 类的规格说明:每个类的规格说明详细显示了必要的属性和操作。<br>
&middot; 类图:显示类的静态结构和类之间的关系。<br>
&middot; 状态图:显示类的对象可能的状态、所需处理的转移以及触发这些转移的操作。<br>
&middot; 包含某个类的对象的动态图(顺序图、合作图、活动图):显示该类的某个方法的实现或别的对象是如何使用该类的对象的。<br>
&middot; 用例图和规格说明:显示系统需求和结果。<br>
编码期间也可能会发现设计模型的缺陷。这时需要开发者修改设计模型。修改设计模型时一定要保持设计模型与编码的一致性,以便将来易于维护。<br>
(5) 测试和配置<br>
完成系统编码后,需要对系统进行测试,它通常包括:单元测试、集成测试、系统测试和验收测试。在单元测试中使用类图和类的规格说明,对单独的类或一组类进行测试;在集成测试中,使用组件图和合作图,对各组件的合作情况进行测试;在系统测试中,使用用例图,以检验所开发的系统是否满足例图所描述的需求。<br>
系统的配置是实际的交付系统,包括文档和组成模型等。对商业MIS而言,它是一个典型的客户/服务器系统。可以用配置图显示系统的物理结构,如图7所示。从表面上看,配置图能显示系统设备之间的关系以及显示节点跟可执行软件单元的对应关系。然而一旦某个节点内部的对象或可执行部件过多(超过5个),就很难完全用配置图清楚描述这种关系。</p>

<p align="center"><img src="../images/uml7-7.jpg" width="472"
height="163"></p>

<p>(6) 小结</p>

<p><br>
本文所举的商业MIS系统的UML建模过程可以用图8来描述。其中首先要把握的是如何使用用例技术正确描述系统需求。UML中的类图描述的是系统中类的静态关系,对象图有助于对复杂类的理解。在系统开发过程中,类图可应用于分析、设计和实现阶段。类的包化有助于进行系统结构设计。商业MIS的包分为用户接口包、商业对象包、数据库包,他们之间的关系是前者依赖后者。</p>

<p><br>
UML的动态模型包括状态图、顺序图、合作图以及活动图。在商业MIS中,顺序图对描述商业对象的交互非常有用,是商业MIS分析、设计和实现阶段最重要的支持手段之一。</p>

<p><br>
总之,UML提供的九种视图从不同应用层次和不同角度为系统从系统分析、设计直到实现的提供有力支持。在不同的阶段建立不同的模型,建模的目的也各不相同。</p>

<p><br>
UML为用户建模提供了强大的支持,并提供了很大的自由度。用户在遵循增量迭代开发的原则下,完全可以根据自己所开发系统的特点,在每次迭代的微过程(分析、设计、实现、测试和配置)中,灵活的选用UML所提供的各种图。</p>

<p><br>
在UML应用过程中,选择合适的工具也很重要,对于简单的应用,
Visio、MSWord等工具就可以支持各种所需图形的生成。但它们都是静态的图形,都不能支持系统的建模与优化。北航软件工程研究所正在研制与开发的UML集成化支持系统,就是为填补我国软件产业的空白而设计和开发的。</p>

<p align="center"><br>
我们认为,未来的软件开发范式将具有以下三个特点:首先,软件开发自动化的程度将越来越高;其次,在所开发的软件中隐藏的差错将越来越少;第三,在新型软件工程环境的支持下,将有能力开发出自适应的软件系统。标准建模语言UML及其集成化支持环境,将为走向这个新范式铺平道路(全文完)。<br>
<img src="../images/uml7-8.jpg" width="554" height="473"></p>

<p align="center"><a href="../index.htm">Home</a></p>
</body>
</html>
